{"version":3,"file":"jd-table.umd.js","sources":["../node_modules/vue-runtime-helpers/dist/normalize-component.js","../src/jd-table.vue","../src/wrapper.js"],"sourcesContent":["'use strict';\n\nfunction normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier\n/* server only */\n, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\n  if (typeof shadowMode !== 'boolean') {\n    createInjectorSSR = createInjector;\n    createInjector = shadowMode;\n    shadowMode = false;\n  } // Vue.extend constructor export interop.\n\n\n  var options = typeof script === 'function' ? script.options : script; // render functions\n\n  if (template && template.render) {\n    options.render = template.render;\n    options.staticRenderFns = template.staticRenderFns;\n    options._compiled = true; // functional template\n\n    if (isFunctionalTemplate) {\n      options.functional = true;\n    }\n  } // scopedId\n\n\n  if (scopeId) {\n    options._scopeId = scopeId;\n  }\n\n  var hook;\n\n  if (moduleIdentifier) {\n    // server build\n    hook = function hook(context) {\n      // 2.3 injection\n      context = context || // cached call\n      this.$vnode && this.$vnode.ssrContext || // stateful\n      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n      // 2.2 with runInNewContext: true\n\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__;\n      } // inject component styles\n\n\n      if (style) {\n        style.call(this, createInjectorSSR(context));\n      } // register component module identifier for async chunk inference\n\n\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier);\n      }\n    }; // used by ssr in case component is cached and beforeCreate\n    // never gets called\n\n\n    options._ssrRegister = hook;\n  } else if (style) {\n    hook = shadowMode ? function () {\n      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));\n    } : function (context) {\n      style.call(this, createInjector(context));\n    };\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // register for functional component in vue file\n      var originalRender = options.render;\n\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context);\n        return originalRender(h, context);\n      };\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate;\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n    }\n  }\n\n  return script;\n}\n\nmodule.exports = normalizeComponent;\n//# sourceMappingURL=normalize-component.js.map\n","<template>\r\n\t<div class=\"jd-reset jd-table\" :class=\"frameClasses\" :style=\"frameStyles\">\r\n\r\n\t\t<div v-if=\"setting.title !== null\" class=\"jd-layerTitle\">{{ setting.title }}</div>\r\n\r\n\t\t<!-- Layer: Highlight -->\r\n\t\t<div v-if=\"setting.highlight\" class=\"jd-layerHighlight jd-noneSelectable\" :style=\"layerHighlightStyles\"></div>\r\n\r\n\t\t<!-- Layer: Controls -->\r\n\t\t<div v-if=\"setting.controls\" class=\"jd-layerControl jd-noneSelectable\" :style=\"layerControlStyles\">\r\n\r\n\t\t\t<!-- Control: Search -->\r\n\t\t\t<div v-if=\"setting.search\" class=\"jd-controlSearch\" :class=\"controlSearchClasses\">\r\n\r\n\t\t\t\t<span @click=\"featureAction('Search')\" class=\"jd-controlItem\" :class=\"searchIconClasses\" :title=\"searchIconTitle\">\r\n\t\t\t\t\t<i  class=\"fas fa-search\"></i>\r\n\r\n\t\t\t\t\t<!-- Control: Get Started with Search Reminder -->\r\n\t\t\t\t\t<div v-if=\"gettingStarted && setting.startBySearchArrowSearch && !status.processingData && !loader\" class=\"jd-searchArrow\">\r\n\t\t\t\t\t{{ setting.startBySearchArrowSearchText }}\r\n\t\t\t\t</div>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<input v-show=\"feature.searching\" @keyup.enter=\"performSearch\" v-model=\"search.text\" type=\"search\" ref=\"searchField\" :placeholder=\"setting.searchPlaceHolder ? setting.searchPlaceHolder : 'Search Here ..'\" :disabled=\"status.processingData\">\r\n\r\n\t\t\t\t<span v-show=\"feature.searching && !search.searching\" @click=\"performSearch\" class=\"jd-controlItem jd-search\" title=\"Perform Search\">\r\n\t\t\t\t\t<i  class=\"fas fa-angle-right\"></i>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<span v-show=\"feature.searching && search.searching\" @click=\"clearSearch\" class=\"jd-controlItem jd-clearSearch\" title=\"Clear Search\">\r\n\t\t\t\t\t<i  class=\"fas fa-times-circle\"></i>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Control: Feature -->\r\n\t\t\t<div class=\"jd-controlFeature\" :class=\"controlFeatureClasses\">\r\n\r\n\t\t\t\t<!-- Feature: Add New -->\r\n\t\t\t\t<span v-if=\"setting.addNew\" @click=\"featureAction('AddNew')\" class=\"jd-controlItem\">\r\n\t\t\t\t\t<i class=\"fas fa-plus-square\" title=\"Add New\"></i>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<!-- Feature: Refresh -->\r\n\t\t\t\t<span v-if=\"setting.refresh\" @click=\"featureAction('Refresh')\" class=\"jd-controlItem\">\r\n\t\t\t\t\t<i class=\"fas fa-sync-alt\" title=\"Refresh\"></i>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<!-- Feature: Pagination Select -->\r\n\t\t\t\t<span v-if=\"rendering.engine === 2\" @click=\"featureAction('Pagination')\" class=\"jd-controlItem\" :class=\"rendering.pagination.changingRows ? 'jd-selected' : ''\">\r\n\t\t\t\t\t<i class=\"fas fa-scroll\" title=\"Rows Per Page\"></i>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<!-- Feature: Column Select -->\r\n\t\t\t\t<span v-if=\"setting.columnSelect\" @click=\"featureAction('Columns')\" class=\"jd-controlItem\" :class=\"columns.selecting ? 'jd-selected' : ''\">\r\n\t\t\t\t\t<i class=\"fas fa-columns\" title=\"Columns\"></i>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<!-- Feature: Filter -->\r\n\t\t\t\t<span v-if=\"setting.filter\" @click=\"featureAction('Filter')\" class=\"jd-controlItem\" :class=\"controlFilterClasses\">\r\n\t\t\t\t\t<i class=\"fas fa-filter\" title=\"Filter\"></i>\r\n\r\n\t\t\t\t\t<!-- Control: Get Started with Filter Reminder -->\r\n\t\t\t\t\t<div v-if=\"gettingStarted && setting.startBySearchArrowFilter && !menuVisible && !status.processingData && !loader\" class=\"jd-filterArrow\">\r\n\t\t\t\t\t\t{{ setting.startBySearchArrowFilterText }}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<!-- Feature: View -->\r\n\t\t\t\t<span v-if=\"setting.views.length > 0\" @click=\"featureAction('View')\" class=\"jd-controlItem\">\r\n\t\t\t\t\t<i class=\"far fa-eye\" title=\"View\"></i>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<!-- Feature: Export -->\r\n\t\t\t\t<span v-if=\"setting.export\" @click=\"featureAction('Export')\" class=\"jd-controlItem\">\r\n\t\t\t\t\t<i class=\"fas fa-file-export\" title=\"Export to Excel\"></i>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<!-- Feature: Maximize/Minimize -->\r\n\t\t\t\t<span v-if=\"setting.maxMinimize && !setting.forceMaximized\" @click=\"featureAction('MaxMinimize')\" class=\"jd-controlItem\">\r\n\t\t\t\t\t<i :class=\"minMaxIconClasses\" :title=\"minMaxIconTitle\"></i>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t\t<!-- Layer: Options -->\r\n\t\t<div class=\"jd-layerOption\" :style=\"layerOptionStyles\">\r\n\r\n\t\t\t<!-- Option: Pagination -->\r\n\t\t\t<transition name=\"jdTableSlideDown\">\r\n\t\t\t\t<div v-if=\"rendering.pagination.changingRows\" class=\"jd-optionDropdown\" :style=\"optionDropdownStyles\">\r\n\r\n\t\t\t\t\t<!-- Header -->\r\n\t\t\t\t\t<div class=\"jd-dropdownHeader\">Page Rows</div>\r\n\r\n\t\t\t\t\t<!-- Pagination Row List -->\r\n\t\t\t\t\t<div v-for=\"rows in rendering.pagination.pageRowOptions\" @click=\"changePageRows( rows )\" class=\"jd-dropdownItem jd-paginationItem jd-clickable\" :class=\"rendering.pagination.currentSelectedPageRowOption === rows ? 'jd-selected' : ''\">\r\n\t\t\t\t\t\t{{ rows }}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</transition>\r\n\r\n\t\t\t<!-- Option: Column -->\r\n\t\t\t<transition name=\"jdTableSlideDown\">\r\n\t\t\t\t<div v-if=\"columns.selecting\" class=\"jd-optionDropdown\" :style=\"optionDropdownStyles\">\r\n\r\n\t\t\t\t\t<!-- Header -->\r\n\t\t\t\t\t<div class=\"jd-dropdownHeader\">Columns</div>\r\n\r\n\t\t\t\t\t<!-- Error -->\r\n\t\t\t\t\t<div v-if=\"columns.selectionError\" class=\"jd-errorMessage\">You must have at least one column enabled.</div>\r\n\r\n\t\t\t\t\t<!-- Column List -->\r\n\t\t\t\t\t<div v-for=\"column in columns.list\" @click=\"columnSelection( column )\" class=\"jd-dropdownItem jd-clickable\">\r\n\r\n\t\t\t\t\t\t<div class=\"jd-columnVisibility\">\r\n\t\t\t\t\t\t\t<i v-if=\"column.enabled\" class=\"fas fa-eye\"></i>\r\n\t\t\t\t\t\t\t<i v-else class=\"fas fa-eye-slash jd-notVisible\"></i>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"jd-columnTitle\">\r\n\t\t\t\t\t\t\t{{ column.title.replace(/(<([^>]+)>)/ig,\"\") }}\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</transition>\r\n\r\n\t\t\t<!-- Option: Filtering -->\r\n\t\t\t<transition name=\"jdTableSlideDown\">\r\n\t\t\t\t<div v-if=\"filters.show\" class=\"jd-optionDropdown\" :style=\"optionDropdownStyles\">\r\n\r\n\t\t\t\t\t<!-- Header -->\r\n\t\t\t\t\t<div class=\"jd-dropdownHeader\">Filtering</div>\r\n\r\n\t\t\t\t\t<!-- Error -->\r\n\t\t\t\t\t<div v-if=\"filters.error\" class=\"jd-errorMessage\">{{ filters.errorText }}</div>\r\n\r\n\t\t\t\t\t<!-- Select Column Input -->\r\n\t\t\t\t\t<div class=\"jd-dropdownInput jd-carrot jd-clickable\">\r\n\t\t\t\t\t\t<div @click=\"filterDropdown(0)\" class=\"jd-label\">\r\n\t\t\t\t\t\t\t<span>{{ filterColumnText.replace(/(<([^>]+)>)/ig,\"\") }}</span>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<transition name=\"jdTableFade\">\r\n\t\t\t\t\t\t\t<ul v-if=\"filters.activeDropdown === 0\">\r\n\t\t\t\t\t\t\t\t<li v-for=\"( column, index ) in filterableColumns\" @click=\"buildFilter( 0, index )\">\r\n\t\t\t\t\t\t\t\t\t{{ column.title.replace(/(<([^>]+)>)/ig,\"\") }}\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</transition>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- Select Filter Input -->\r\n\t\t\t\t\t<div class=\"jd-dropdownInput jd-carrot jd-clickable\">\r\n\t\t\t\t\t\t<div @click=\"filterDropdown(1)\" class=\"jd-label\">\r\n\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t{{ filterOptionText }}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<transition name=\"jdTableFade\">\r\n\t\t\t\t\t\t\t<ul v-if=\"filters.activeDropdown === 1\">\r\n\t\t\t\t\t\t\t\t<li v-for=\"( option, index ) in filterableOptions\" @click=\"buildFilter( 1, option )\">\r\n\t\t\t\t\t\t\t\t\t{{ option }}\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</transition>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- Select Value Input -->\r\n\t\t\t\t\t<div class=\"jd-dropdownInput jd-addPadding\">\r\n\t\t\t\t\t\t<input @keyup.enter=\"addFilter\" ref=\"filterInput\" type=\"text\" @input=\"filters.error = false\" v-model=\"filters.beingBuilt.value\" placeholder=\"Value\"/>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- Filter Apply Buttons -->\r\n\t\t\t\t\t<div class=\"jd-dropdownRow jd-separate\">\r\n\t\t\t\t\t\t<button v-on:click=\"clearAllFilters\" type=\"button\" class=\"jd-button jd-danger\" title=\"Clear All Filters\">Clear All</button>\r\n\t\t\t\t\t\t<button v-on:click=\"addFilter\" type=\"button\" class=\"jd-button jd-success\" title=\"Apply Filter\">Apply</button>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- Header -->\r\n\t\t\t\t\t<div class=\"jd-dropdownHeader jd-subHeader\">Active Filters</div>\r\n\r\n\t\t\t\t\t<!-- Filtered Results -->\r\n\t\t\t\t\t<div class=\"jd-dropdownHeader jd-smallHeader\">Filtered Results: {{ formatNumberWithCommas ( processedDataSize ) }}</div>\r\n\r\n\t\t\t\t\t<!-- Active Filters -->\r\n\t\t\t\t\t<div class=\"jd-dropdownInput jd-disabled\" v-for=\"( filter, index ) in filters.active\">\r\n\t\t\t\t\t\t<div class=\"jd-label\" :title=\"filter.column.title.replace(/(<([^>]+)>)/ig,'') + ' .. ' + filter.option + ' .. ' + filter.value\">\r\n\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t{{ filter.column.title.replace(/(<([^>]+)>)/ig,\"\") }}\r\n\r\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Equals To'\" class=\"fas fa-equals\"></i>\r\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Not Equals To'\" class=\"fas fa-not-equal\"></i>\r\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Greater/Equal To'\" class=\"fas fa-greater-than-equal\"></i>\r\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Less/Equal To'\" class=\"fas fa-less-than-equal\"></i>\r\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Contains'\" class=\"fas fa-level-down-alt\"></i>\r\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Begins With'\" class=\"fas fa-long-arrow-alt-right\"></i>\r\n\r\n\t\t\t\t\t\t\t\t\"{{ filter.value }}\"\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<i v-on:click=\"removeFilter( index )\" class=\"fas fa-minus-circle jd-removeIcon jd-clickable\" title=\"Remove Filter\"></i>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</transition>\r\n\r\n\t\t\t<!-- Option: View -->\r\n\t\t\t<transition name=\"jdTableSlideDown\">\r\n\t\t\t\t<div v-if=\"rendering.views.changingViews\" class=\"jd-optionDropdown\" :style=\"optionDropdownStyles\">\r\n\r\n\t\t\t\t\t<!-- Header -->\r\n\t\t\t\t\t<div class=\"jd-dropdownHeader\">Views</div>\r\n\r\n\t\t\t\t\t<!-- View List -->\r\n\t\t\t\t\t<div v-for=\"row in rendering.views.list\" @click=\"changeViews( row )\" class=\"jd-dropdownItem jd-paginationItem jd-clickable\" :class=\"rendering.views.currentSelectedView === row.viewName ? 'jd-selected' : ''\">\r\n\t\t\t\t\t\t{{ row.viewName }}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</transition>\r\n\r\n\t\t</div>\r\n\r\n\t\t<!-- Layer: Content -->\r\n\t\t<div class=\"jd-layerContent\" ref=\"contentFrame\" :style=\"layerContentStyles\">\r\n\r\n\t\t\t<!-- Table Content: Table -->\r\n\t\t\t<div class=\"jd-contentTable\" :style=\"tableStyles\">\r\n\r\n\t\t\t\t<!-- Table: Head -->\r\n\t\t\t\t<div class=\"jd-head\" :style=\"tableHeadStyles\">\r\n\r\n\t\t\t\t\t<div v-for=\"( column, index ) in rendering.views.currentView.schema\" v-if=\"column.enabled\" @click=\"changeSort( index, column.name, column.sortSpecial )\" :title=\"sortTitle( index )\" class=\"jd-cell\" :class=\"columns.activeHoverIndex === index ? ( 'jd-hoverAssist' + headCellClasses) : headCellClasses\" :style=\"column.headerStyles\">\r\n\r\n\t\t\t\t\t\t<div class=\"jd-cellText\">\r\n\t\t\t\t\t\t\t<div class=\"jd-title\" v-html=\"column.title + 'blah'\"></div>\r\n\t\t\t\t\t\t\t<i v-if=\"setting.columnSort && columns.activeSortIndex === index && !columns.activeSortAsc\" class=\"fas fa-sort-alpha-up\"></i>\r\n\t\t\t\t\t\t\t<i v-if=\"setting.columnSort && columns.activeSortIndex === index && columns.activeSortAsc\" class=\"fas fa-sort-alpha-down\"></i>\r\n\t\t\t\t\t\t\t<i v-if=\"setting.columnSort && columns.activeSortIndex !== index\" class=\"fas fa-sort-alpha-down jd-hoverSort\"></i>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div v-if=\"resizable\" class=\"jd-resize\" @mousedown=\"resizeStart( index, $event )\" @mousemove=\"resizeDrag( index, $event )\" :class=\"index === columns.activeResize ? 'jd-selected' : ''\"></div>\r\n\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<!-- Table Body -->\r\n\t\t\t\t<div class=\"jd-body\" ref=\"bodyData\" :style=\"tableBodyStyles\" @scroll=\"virtualScroll( $event )\" @mouseleave=\"bodyLeave\">\r\n\r\n\t\t\t\t\t<div v-if=\"rendering.engine === 0\" class=\"jd-virtualBody\" :style=\"bodyVirtualStyles\"></div>\r\n\r\n\t\t\t\t\t<div ref=\"viewData\" :style=\"bodyViewStyles\">\r\n\t\t\t\t\t\t<div v-if=\"isViewAvailable\" v-for=\"row in currentTableData\" @click=\"rowActionSingle( row.index )\" @dblclick=\"rowActionDouble( row.index )\" @mouseover=\"rowHover( row.index, $event )\" class=\"jd-row\" :class=\"viewRowClasses\" :style=\"viewRowStyles\">\r\n\t\t\t\t\t\t\t<div v-for=\"( column, columnIndex ) in rendering.views.currentView.schema\" v-if=\"column.enabled\" class=\"jd-cell\" :class=\"rowDataClasses\" @mouseover=\"cellHover( columnIndex )\" :style=\"column.dataStyles\">\r\n\t\t\t\t\t\t\t\t<!-- List Items -->\r\n\t\t\t\t\t\t\t\tasdasda\r\n\t\t\t\t\t\t\t\t<span v-if=\"column.type === 'Array'\">\r\n\t\t\t\t\t\t\t\t\t<ul class=\"jd-list\">\r\n\t\t\t\t\t\t\t\t\t\t<li v-for=\"item in row.data[column.name]\">\r\n\t\t\t\t\t\t\t\t\t\t\t{{ item }}\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t<span v-else-if=\"column.type === 'Button'\">TestB<button v-on:click.prevent=\"$emit(column.emitFunc,row.data)\">{{row.data[column.name]}}</button></span>\r\n\t\t\t\t\t\t\t\t<span v-else-if=\"column.type === 'Html'\" v-html=\"row.data[column.name]\"></span>\r\n\t\t\t\t\t\t\t\t<!-- String Items -->\r\n\t\t\t\t\t\t\t\t<span v-else>{{ row.data[column.name] }} - {{column.type}}</span>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t\t<!-- Layer: Footer -->\r\n\t\t<div v-if=\"setting.footer\" class=\"jd-layerFooter jd-noneSelectable\" :style=\"layerFooterStyles\">\r\n\r\n\t\t\t<div v-if=\"rendering.engine === 2 && processedDataSize\" class=\"jd-pagination\">\r\n\t\t\t\t<div class=\"jd-paginationDirection jd-left\" :class=\"rendering.pagination.currentPage === 1 ? 'jd-disabled' : ''\">\r\n\t\t\t\t\t<i @click=\"paginationFirst\" class=\"fas fa-fast-backward jd-start\" title=\"First Page\"></i>\r\n\t\t\t\t\t<i @click=\"paginationPrevious\" class=\"fas fa-backward\" title=\"Previous Page\"></i>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div v-if=\"!status.mobileSize\" class=\"jd-paginationRows\">\r\n\t\t\t\t\tRows&nbsp;<span v-if=\"processedDataSize\">{{ rendering.pagination.currentStartIndex + 1 }} - {{ rendering.pagination.currentEndIndex }} of&nbsp;</span>{{ formatNumberWithCommas( processedDataSize ) }}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div v-else class=\"jd-paginationRows\">\r\n\t\t\t\t\t<span v-if=\"processedDataSize\">{{ rendering.pagination.currentStartIndex + 1 }} - {{ rendering.pagination.currentEndIndex }}</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"jd-paginationArea\">\r\n\r\n\t\t\t\t\t<div v-if=\"!status.mobileSize\" class=\"jd-paginationList\">\r\n\t\t\t\t\t\t<div v-if=\"rendering.pagination.leftPages[0] > 1\" class=\"jd-paginationPage\">\r\n\t\t\t\t\t\t\t<i class=\"fas fa-ellipsis-h\"></i>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div v-for=\"page in rendering.pagination.leftPages\" @click=\"paginationChange( page )\" class=\"jd-paginationPage jd-addHover\" :class=\"page === rendering.pagination.currentPageHightlight ? 'jd-selected' : ''\">\r\n\t\t\t\t\t\t\t<span>{{ page }}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div v-if=\"!status.mobileSize\" class=\"jd-paginationList\">\r\n\t\t\t\t\t\t<div v-for=\"page in rendering.pagination.rightPages\" @click=\"paginationChange( page )\" class=\"jd-paginationPage jd-addHover\" :class=\"page === rendering.pagination.currentPageHightlight ? 'jd-selected' : ''\">\r\n\t\t\t\t\t\t\t<span>{{ page }}</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div v-if=\"rendering.pagination.rightPages[rendering.pagination.rightPages.length - 1] < rendering.pagination.availablePages\" class=\"jd-paginationPage\">\r\n\t\t\t\t\t\t\t<i class=\"fas fa-ellipsis-h\"></i>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"jd-paginationDirection jd-right\" :class=\"rendering.pagination.currentPage === rendering.pagination.availablePages ? 'jd-disabled' : ''\">\r\n\t\t\t\t\t<i @click=\"paginationNext\" class=\"fas fa-forward\" title=\"Next Page\"></i>\r\n\t\t\t\t\t<i @click=\"paginationLast\" class=\"fas fa-fast-forward jd-end\" title=\"Last Page\"></i>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t\t<div v-if=\"( rendering.engine === 0 || rendering.engine === 1 ) && processedDataSize\">\r\n\t\t\t\t<div class=\"jd-resultRows\" v-show=\"!filters.show\">Rows: {{ formatNumberWithCommas( processedDataSize ) }}</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t\t<!-- Layer: Popup -->\r\n\t\t<transition name=\"jdTableFade\">\r\n\t\t\t<!-- Table Error -->\r\n\t\t\t<div v-if=\"status.tableError\" class=\"jd-layerPopup jd-fullFrame\">\r\n\t\t\t\t<div class=\"jd-errorMessage\">\r\n\t\t\t\t\t{{ status.tableError }}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- No Data Message -->\r\n\t\t\t<div v-if=\"noDataMessage\" class=\"jd-layerPopup jd-contentFrame\">\r\n\t\t\t\t<div class=\"jd-noDataFrame\">\r\n\t\t\t\t\t<div class=\"jd-title\">\r\n\t\t\t\t\t\tNo Data Available\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div v-if=\"filtering\" class=\"jd-filters\">\r\n\t\t\t\t\t\tTry changing your applied filters.\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Loader -->\r\n\t\t\t<div v-if=\"loader\" class=\"jd-layerPopup jd-fullFrame jd-loader\">\r\n\t\t\t\t<div class=\"fulfilling-square-spinner\">\r\n\t\t\t\t\t<div class=\"spinner-inner\"></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<span class=\"jd-loadingText\">Loading ...</span>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Processing -->\r\n\t\t\t<div v-if=\"status.processingData\" class=\"jd-layerPopup jd-contentFrame jd-loader\">\r\n\t\t\t\t<div class=\"fulfilling-square-spinner\">\r\n\t\t\t\t\t<div class=\"spinner-inner\"></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<span class=\"jd-loadingText\">Processing</span>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Searching -->\r\n\t\t\t<div v-if=\"status.searching\" class=\"jd-layerPopup jd-contentFrame jd-loader\">\r\n\t\t\t\t<div class=\"self-building-square-spinner\">\r\n\t\t\t\t\t<div class=\"square\"></div>\r\n\t\t\t\t\t<div class=\"square\"></div>\r\n\t\t\t\t\t<div class=\"square\"></div>\r\n\t\t\t\t\t<div class=\"square clear\"></div>\r\n\t\t\t\t\t<div class=\"square\"></div>\r\n\t\t\t\t\t<div class=\"square\"></div>\r\n\t\t\t\t\t<div class=\"square clear\"></div>\r\n\t\t\t\t\t<div class=\"square\"></div>\r\n\t\t\t\t\t<div class=\"square\"></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<span class=\"jd-loadingText\">Searching</span>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Updating -->\r\n\t\t\t<div v-if=\"status.updatingPage\" class=\"jd-layerPopup jd-contentFrame jd-loader\">\r\n\t\t\t\t<div class=\"looping-rhombuses-spinner\">\r\n\t\t\t\t\t<div class=\"rhombus\"></div>\r\n\t\t\t\t\t<div class=\"rhombus\"></div>\r\n\t\t\t\t\t<div class=\"rhombus\"></div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<span class=\"jd-loadingText\">Updating</span>\r\n\t\t\t</div>\r\n\r\n\t\t\t<!-- Get Started Messaging -->\r\n\t\t\t<div v-if=\"gettingStarted\" class=\"jd-layerPopup jd-contentFrame\">\r\n\t\t\t\t<div class=\"jd-tableMessage\" v-html=\"setting.startBySearchMessage\"></div>\r\n\t\t\t</div>\r\n\t\t</transition>\r\n\r\n\t\t<!-- Layer: Quick View -->\r\n\t\t<transition name=\"jdTableFade\">\r\n\t\t\t<div v-if=\"row.selectedIndex !== null && !status.processingData && !status.searching && !status.updatingPage\" class=\"jd-layerPopup jd-fullBrowser jd-fullFrame jd-fullFrameZone\">\r\n\r\n\t\t\t\t<div class=\"jd-quickView\">\r\n\r\n\t\t\t\t\t<div class=\"jd-quickViewHighlight_1\"></div>\r\n\t\t\t\t\t<div class=\"jd-quickViewHighlight_2\"></div>\r\n\r\n\t\t\t\t\t<div class=\"jd-quickViewControl\">\r\n\t\t\t\t\t\t<div class=\"jd-controlAction\">\r\n\t\t\t\t\t\t\t<span @click=\"print('quickViewContent')\" >\r\n\t\t\t\t\t\t\t\t<i class=\"fas fa-print\"></i>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<span v-if=\"setting.viewItem\" @click=\"featureAction('ViewItem')\">\r\n\t\t\t\t\t\t\t\t<i class=\"far fa-arrow-alt-circle-up\"></i>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div class=\"jd-controlTitle\">Quick View</div>\r\n\r\n\t\t\t\t\t\t<div class=\"jd-controlAction\">\r\n\t\t\t\t\t\t\t<span v-if=\"setting.deleteItem\" @click=\"featureAction('DeleteItem')\">\r\n\t\t\t\t\t\t\t\t<i class=\"fas fa-trash-alt\"></i>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<span v-if=\"setting.editItem\" @click=\"featureAction('EditItem')\">\r\n\t\t\t\t\t\t\t\t<i class=\"fas fa-pencil-alt\"></i>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t<span @click=\"quickViewClose\">\r\n\t\t\t\t\t\t\t\t<i class=\"fas fa-times\"></i>\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div ref=\"quickViewContent\" class=\"jd-quickViewContent\">\r\n\t\t\t\t\t\t<div v-for=\"column in columns.list\" class=\"jd-contentRow\">\r\n\t\t\t\t\t\t\t<div class=\"jd-rowTitle\">{{ column.title.replace(/(<([^>]+)>)/ig,\"\") }}</div>\r\n\r\n\t\t\t\t\t\t\t<!-- List Items -->\r\n\t\t\t\t\t\t\t<div v-if=\"column.type === 'Array'\" class=\"jd-rowData\">\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t\t<li v-for=\"item in currentTableData[row.selectedIndex].data[column.name]\">\r\n\t\t\t\t\t\t\t\t\t\t{{ item }}\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<!-- String Items -->\r\n\t\t\t\t\t\t\t<div v-else class=\"jd-rowData\">{{ currentTableData[row.selectedIndex].data[column.name] }}</div>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div class=\"jd-quickViewFooter\">\r\n\t\t\t\t\t\t<div @click=\"quickViewPrevious\" class=\"jd-footerDirection jd-previous\">\r\n\t\t\t\t\t\t\t<i class=\"fas fa-backward\"></i>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div v-if=\"setting.dataProvider === 1\" class=\"jd-footerItem\">\r\n\t\t\t\t\t\t\t{{ row.selectedIndex + rendering.pagination.currentStartIndex + 1 }} of {{ processedDataSize }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div v-else class=\"jd-footerItem\">\r\n\t\t\t\t\t\t\t{{ row.selectedIndex + 1 }} of {{ processedDataSize }}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div @click=\"quickViewNext\" class=\"jd-footerDirection jd-next\">\r\n\t\t\t\t\t\t\t<i class=\"fas fa-forward\"></i>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</transition>\r\n\r\n\t\t<!-- Layer: Right Click / Context Menu -->\r\n\t\t<transition name=\"jdTableFade\">\r\n\t\t\t<div v-show=\"( setting.contextMenuLeft || setting.contextMenuRight ) && status.contextMenu\" class=\"jd-contextMenu\" ref=\"jd_contextMenu\">\r\n\t\t\t\t<ul class=\"jd-contextMenuOptions\">\r\n\t\t\t\t\t<li v-if=\"setting.contextMenuQuickView || setting.contextMenuView || setting.contextMenuEdit || setting.contextMenuDelete\" class=\"jd-contextMenuHeader jd-noneSelectable\">\r\n\t\t\t\t\t\t<span>Row Options</span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li v-if=\"setting.contextMenuQuickView\" @click=\"contextQuickView\" class=\"jd-contextMenuOption jd-noneSelectable\" title=\"Open Quick View\">\r\n\t\t\t\t\t\t<span>Quick View</span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li v-if=\"setting.contextMenuView\"  class=\"jd-contextMenuOption jd-noneSelectable\">\r\n\t\t\t\t\t\t<span @click=\"contextView(false)\" title=\"View Record\">View</span>\r\n\t\t\t\t\t\t<span @click=\"contextView(true)\" title=\"View (In New Window)\"><i class=\"fas fa-external-link-alt\"></i></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li v-if=\"setting.contextMenuEdit\" class=\"jd-contextMenuOption jd-noneSelectable\">\r\n\t\t\t\t\t\t<span @click=\"contextEdit(false)\" title=\"Edit Record\">Edit</span>\r\n\t\t\t\t\t\t<span @click=\"contextEdit(true)\" title=\"Edit (In New Window)\"><i class=\"fas fa-external-link-alt\"></i></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li v-if=\"setting.contextMenuDelete\" class=\"jd-contextMenuOption jd-noneSelectable\">\r\n\t\t\t\t\t\t<span @click=\"contextDelete\" title=\"Delete Record\">Delete</span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li v-if=\"setting.contextMenuAdd\" class=\"jd-contextMenuHeader jd-noneSelectable\">\r\n\t\t\t\t\t\t<span>Table Options</span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li v-if=\"setting.contextMenuAdd\" class=\"jd-contextMenuOption jd-noneSelectable\">\r\n\t\t\t\t\t\t<span @click=\"contextAdd(false)\" title=\"Add Record\">Add</span>\r\n\t\t\t\t\t\t<span @click=\"contextAdd(true)\" title=\"Add (In New Window)\"><i class=\"fas fa-external-link-alt\"></i></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</transition>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n\texport default\r\n\t{\r\n\t\tname : 'JDTable',\r\n\r\n\t\tdata ()\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tstatus :\r\n\t\t\t\t{\r\n\t\t\t\t\ttableError     : null,\r\n\t\t\t\t\tgetStarted     : false,\r\n\t\t\t\t\tprocessingData : false,\r\n\t\t\t\t\tupdatingPage   : false,\r\n\t\t\t\t\tsearching      : false,\r\n\t\t\t\t\tmobileSize     : false,\r\n\t\t\t\t\tisIE11         : false,\r\n\t\t\t\t\ttableScroll    : false,\r\n\t\t\t\t\tlastAction     : null,\r\n\t\t\t\t\tcontextMenu    : false,\r\n\t\t\t\t\ttableReady     : false\r\n\t\t\t\t},\r\n\r\n\t\t\t\tcurrentTableData : [],\r\n\t\t\t\tdata             : [],\r\n\r\n\t\t\t\tfeature :\r\n\t\t\t\t{\r\n\t\t\t\t\tmaximized : false,\r\n\t\t\t\t\tsearching : false\r\n\t\t\t\t},\r\n\r\n\t\t\t\trendering :\r\n\t\t\t\t{\r\n\t\t\t\t\tengine            : 0,\r\n\t\t\t\t\tisScrolling       : null,\r\n\t\t\t\t\tresettingScroll   : false,\r\n\t\t\t\t\tcontentFrameWidth : null,\r\n\t\t\t\t\tisResizing        : null,\r\n\t\t\t\t\tpagination        :\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcurrentPage                  : null,\r\n\t\t\t\t\t\tcurrentPageHightlight        : null,\r\n\t\t\t\t\t\tcurrentStartIndex            : null,\r\n\t\t\t\t\t\tcurrentEndIndex              : null,\r\n\t\t\t\t\t\tavailablePages               : null,\r\n\t\t\t\t\t\tcurrentPageRows              : null,\r\n\t\t\t\t\t\tpageRowOptions               : [],\r\n\t\t\t\t\t\tchangingRows                 : false,\r\n\t\t\t\t\t\tleftPages                    : [],\r\n\t\t\t\t\t\trightPages                   : [],\r\n\t\t\t\t\t\tcurrentSelectedPageRowOption : null,\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvirtual :\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trowMiddleIndex          : 0,\r\n\t\t\t\t\t\trowTopIndex             : 0,\r\n\t\t\t\t\t\trowBottomIndex          : 0,\r\n\t\t\t\t\t\ttriggerTopPositionPX    : null,\r\n\t\t\t\t\t\ttriggerBottomPositionPX : null,\r\n\t\t\t\t\t\theight                  : null,\r\n\t\t\t\t\t\tvirtualBufferSize       : 5\r\n\t\t\t\t\t},\r\n\t\t\t\t\texternal :\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdataSize : null\r\n\t\t\t\t\t},\r\n\t\t\t\t\tviews :\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tchangingViews       : false,\r\n\t\t\t\t\t\tcurrentSelectedView : null,\r\n\t\t\t\t\t\tlist                : [],\r\n\t\t\t\t\t\tcurrentView         : []\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\tprocessedData : [],\r\n\r\n\t\t\t\trow :\r\n\t\t\t\t{\r\n\t\t\t\t\tselectedIndex        : null,\r\n\t\t\t\t\tactiveHoverIndex     : null,\r\n\t\t\t\t\tactiveHoverElement   : null,\r\n\t\t\t\t\tactiveContextIndex   : null,\r\n\t\t\t\t\tactiveContextElement : null\r\n\t\t\t\t},\r\n\r\n\t\t\t\tcolumns :\r\n\t\t\t\t{\r\n\t\t\t\t\tlist               : [],\r\n\t\t\t\t\tactiveHoverIndex   : null,\r\n\t\t\t\t\tactiveResize       : null,\r\n\t\t\t\t\tactiveResizeStart  : null,\r\n\t\t\t\t\tactiveSortIndex    : 0,\r\n\t\t\t\t\tactiveSortName     : null,\r\n\t\t\t\t\tactiveSortAsc      : false,\r\n\t\t\t\t\tactiveSortSpecial  : null,\r\n\t\t\t\t\tselecting          : false,\r\n\t\t\t\t\tselectionItemWidth : 25,\r\n\t\t\t\t\tselectionError     : false\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsearch :\r\n\t\t\t\t{\r\n\t\t\t\t\ttext      : '',\r\n\t\t\t\t\tsearching : false\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfilters :\r\n\t\t\t\t{\r\n\t\t\t\t\tshow           : false,\r\n\t\t\t\t\tactive         : [],\r\n\t\t\t\t\tactiveDropdown : null,\r\n\t\t\t\t\terror          : false,\r\n\t\t\t\t\terrorText      : '',\r\n\t\t\t\t\tbeingBuilt     :\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcolumn : null,\r\n\t\t\t\t\t\toption : null,\r\n\t\t\t\t\t\tvalue  : null\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// ---------------\r\n\t\t// Component Props\r\n\t\t// ---------------\r\n\t\t//\r\n\t\t// OPTIONS ----\r\n\t\t//\r\n\t\t// Prop        : option.dataProvider\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : 0\r\n\t\t// Description : Sets the manner of which data will be provided to JD-Table.\r\n\t\t//\r\n\t\t// -----\r\n\t\t// | 0 | FULL    : All data will be provided as one single injection to the table. Search/filtering will be performed on that data by JD-Table.\r\n\t\t// | 1 | REQUEST : All data will be provided via external requests for all data based actions (search, filtering, pagination, sorting, etc.).\r\n\t\t// -----         : These data based actions will instead emit events to the parent app for processing.\r\n\t\t//\r\n\t\t// Prop        : option.columns\r\n\t\t// Value       : [ARRAY]\r\n\t\t// Default     : Empty\r\n\t\t// Description : An array of objects which configure the columns of the table.\r\n\t\t// Format      : [\r\n\t\t//\t\t\t\t \t{\r\n\t\t//\t\t\t\t\t\tname          : [STRING] name of the column in the JSON data.\r\n\t\t//\t\t\t\t\t\ttitle         : [STRING] title used in the table header.\r\n\t\t//\t\t\t\t\t\twidth         : [NUMBER] used for the width of the column.\r\n\t\t//\t\t\t\t\t\t\t          : When option.responsiveTable = FALSE --> Width provided will be PX.\r\n\t\t//                                    : When option.responsiveTable = TRUE --> Width provided will be %.\r\n\t\t//\t \t\t\t\t\torder         : [NUMBER] which defines the order of columns from left to right.\r\n\t\t//                      sort          : [BOOLEAN] sets the column as the initially sorted column.\r\n\t\t// \t\t\t\t\t    sortDirection : [STRING] sets the direction of the initially sorted column: 'desc' or 'asc'.\r\n\t\t// \t\t\t\t\t\ttype          : [STRING] which defines the type of data in the column. Options are: 'String' and 'Number'.\r\n\t\t// \t\t\t\t\t\tfilterable    : [BOOLEAN] which determines if the column can be filtered.\r\n\t\t// \t\t\t\t\t\tenabled       : [BOOLEAN] which determines if the column is shown/enabled on initial load.\r\n\t\t//\t\t\t\t\t}\r\n\t\t//               ]\r\n\t\t//\r\n\t\t// Prop        : startBySearch\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : Enables/disables the startBySearchMessage when search text or a filter are not applied.\r\n\t\t//             : This is useful for large dataset's where you don't want to load the entire DB.\r\n\t\t//             : Instead, this prompts the user to search or apply a filter to view any data.\r\n\t\t//\r\n\t\t// Prop        : startBySearchMessage\r\n\t\t// Value       : [STRING]\r\n\t\t// Default     : NULL\r\n\t\t// Description : Message which will be displayed when no search/filter is being applied.\r\n\t\t//\r\n\t\t// Prop        : startBySearchArrowSearch\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : NULL\r\n\t\t// Description : When startBySearchMessage is active, displays a pointer to the search box.\r\n\t\t//\r\n\t\t// Prop        : startBySearchArrowFilter\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : NULL\r\n\t\t// Description : When startBySearchMessage is active, displays a pointer to the filter box.\r\n\t\t//\r\n\t\t// Prop        : startBySearchArrowSearchText\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : NULL\r\n\t\t// Description : Text to be displayed when startBySearchArrorSearch is enabled.\r\n\t\t//\r\n\t\t// Prop        : startBySearchArrowFilterText\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : NULL\r\n\t\t// Description : Text to be displayed when startBySearchArrorFilter is enabled.\r\n\t\t//\r\n\t\t// Prop        : option.maxMinimize\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the min/maximize feature button.\r\n\t\t//\r\n\t\t// Prop        : option.addNew\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : Enables/disables the Add New feature button.\r\n\t\t//\r\n\t\t// Prop        : option.editItem\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : Enables/disables the Edit Item feature button (quick view).\r\n\t\t//\r\n\t\t// Prop        : option.viewItem\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : Enables/disables the View Item feature button (quick view).\r\n\t\t//\r\n\t\t// Prop        : option.deleteItem\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : Enables/disables the Delete Item feature button (quick view).\r\n\t\t//\r\n\t\t// Prop        : option.refresh\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the refresh feature button.\r\n\t\t//\r\n\t\t// Prop        : option.search\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the search feature button/input.\r\n\t\t//\r\n\t\t// Prop        : option.columnSelect\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the column select feature.\r\n\t\t//\r\n\t\t// Prop        : option.resize\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables resizing of columns. Only works when responsiveTable is set to FALSE.\r\n\t\t//\r\n\t\t// Prop        : option.filter\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the filter feature.\r\n\t\t//\r\n\t\t// Prop        : option.export\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the export to excel feature. Not compatible with IE11 or lower.\r\n\t\t//\r\n\t\t// Prop        : option.exportLimit\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : null (ALL)\r\n\t\t// Description : Sets a restriction on how many records can be exported via Excel.\r\n\t\t//\r\n\t\t// Prop        : option.columnSort\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the ability to sort by column.\r\n\t\t//\r\n\t\t// Prop        : option.quickView\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : 1\r\n\t\t// Description : Enables/disables the ability to click or double click a row to see the quick view.\r\n\t\t//\r\n\t\t// -----\r\n\t\t// | 0 | NONE         : Disables quick view.\r\n\t\t// | 1 | CLICK        : Quick view appears on single (left) click.\r\n\t\t// | 2 | DOUBLE CLICK : Quick view appears on double (left) click.\r\n\t\t// -----\r\n\t\t//\r\n\t\t// Prop        : option.contextMenu\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : Enables/disables a row context menu for when a user right clicks on a row.\r\n\t\t//\r\n\t\t// Prop        : option.contextMenuQuickView\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the row context menu option for Quick Viewing the row data.\r\n\t\t//\r\n\t\t// Prop        : option.contextMenuView\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the row context menu option for Viewing the row data.\r\n\t\t//\r\n\t\t// Prop        : option.contextMenuEdit\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the row context menu option for Editing the row data.\r\n\t\t//\r\n\t\t// Prop        : option.contextMenuDelete\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the row context menu option for Delete the row data.\r\n\t\t//\r\n\t\t// Prop        : option.contextMenuAdd\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enables/disables the row context menu option for Adding a row of data.\r\n\t\t//\r\n\t\t// Prop        : option.renderEngine\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : NULL\r\n\t\t// Description : Selects the rendering engine JD-Table uses when rendering rows of data.\r\n\t\t//\r\n\t\t// -----\r\n\t\t// | 0 | VIRTUAL    : Render only a small amount of rows based on the table view size. Use this for large tables.\r\n\t\t// | 1 | ALL        : Render all rows regardless of how many there are.\r\n\t\t// | 2 | PAGINATION : Render a specific number of rows and enables 'Next'/'Previous' buttons.\r\n\t\t// -----\r\n\t\t//\r\n\t\t// -------------------------------------\r\n\t\t// | responsiveFrame | responsiveTable |\r\n\t\t// | true            | true            | : Frame fits parent & columns are auto adjusted (%).\r\n\t\t// | true            | false           | : Frame fits parent to a min-width of sum of columns & column are set (PX) size.\r\n\t\t// | false           | true            | : Frame is set (PX) size & column are auto adjusted (%).\r\n\t\t// | false           | false           | : Frame is set (PX) size and columns are set (PX) size.\r\n\t\t// -------------------------------------\r\n\t\t//\r\n\t\t// Prop        : option.responsiveFrame\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Renders the entire JD-Table frame responsively or not.\r\n\t\t//\r\n\t\t// ---------\r\n\t\t// | TRUE  | : Renders the entire JD-Table responsively. It will fit to the parent container.\r\n\t\t// | FALSE | : Renders the entire JD-Table to the width set to the option.frameWidth in pixels.\r\n\t\t// ---------\r\n\t\t//\r\n\t\t// Prop        : option.responsiveFrameForceFullWidth\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : When responsiveFrame is set to true and the number of columns in the table shrink the entire table will as well\r\n\t\t//             : (according it its parent). However sometimes you want the table to be 100% no matter what. Set this option to\r\n\t\t//             : True and it will force the table to ignore column widths when the table shrinks.\r\n\t\t//\r\n\t\t// Prop        : option.responsiveTable\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Renders the data table within JD-Table responsively or not.\r\n\t\t//\r\n\t\t// ---------\r\n\t\t// | TRUE  | : Renders the data table responsively to the width of the entire JD-Table frame.\r\n\t\t// | FALSE | : Renders the data table according to the option.columns.width values for each column.\r\n\t\t// ---------\r\n\t\t//\r\n\t\t// Prop        : option.virtualEngineRowStart\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : 250\r\n\t\t// Description : Indicates the amount of rows that if the data exceeds will trigger the virtual rendering engine.\r\n\t\t//             : Only used when renderEngine is set to 0 (auto).\r\n\t\t//\r\n\t\t// Prop        : option.frameWidth\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : Null\r\n\t\t// Description : A number value (PX) which will be assigned to the width of JD-Table when option.responsiveFrame is set to False.\r\n\t\t//\r\n\t\t// Prop        : option.headerHeight\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : 40\r\n\t\t// Description : A number value (PX) which will applied to the table header row height.\r\n\t\t//\r\n\t\t// Prop        : option.dataHeight\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : NULL\r\n\t\t// Description : A number value (PX) which will applied to the data table body height. Null = 100%.\r\n\t\t//\r\n\t\t// Prop        : option.rowHeight\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : 42\r\n\t\t// Description : A number value (PX) which will applied as the height for each data row.\r\n\t\t//\r\n\t\t// Prop        : option.paginationRowLimits\r\n\t\t// Value       : [ARRAY]\r\n\t\t// Default     : [20, 50, 100]\r\n\t\t// Description : Array of numbers that will be provided as options for how many rows appear per page (pagination engine).\r\n\t\t//\r\n\t\t// Prop        : option.paginationRowStart\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : 20\r\n\t\t// Description : A number that will be used as the default selection for how many rows to appear per page (pagination engine).\r\n\t\t//\r\n\t\t// Prop        : option.paginationRowAll\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Enable/disable the \"ALL\" option for how many rows to appear per page (pagination).\r\n\t\t//\r\n\t\t// Prop        : option.pageSideQuantity\r\n\t\t// Value       : [NUMBER]\r\n\t\t// Default     : 5\r\n\t\t// Description : The number of page choices that will be available on either side of the row display on the footer. (pagination engine).\r\n\t\t//\r\n\t\t// Prop        : option.forceSearchOpen\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : Force search to be open and cannot be closed.\r\n\t\t//\r\n\t\t// Prop        : option.searchPlaceHolder\r\n\t\t// Value       : [STRING]\r\n\t\t// Default     : NULL\r\n\t\t// Description : The placeholder text for the search input box.\r\n\t\t//\r\n\t\t// Prop        : option.startMaximized\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : Renders the table maximized.\r\n\t\t//\r\n\t\t// Prop        : option.forceMaximized\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : False\r\n\t\t// Description : Renders the table maximized and removes the min/maximize button.\r\n\t\t//\r\n\t\t// Prop        : option.rowZebra\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Renders all even rows with a light background.\r\n\t\t//\r\n\t\t// Prop        : option.rowFlex\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : Allows the row height to be flexible according to the data in the columns.\r\n\t\t//\r\n\t\t// Prop        : option.resizeForceMinWidth\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : True\r\n\t\t// Description : When enabled, columns cannot be resized smaller then their initial option.column.width.\r\n\t\t// \t\t\t   : Only applies when option.resize is enabled.\r\n\t\t//\r\n\t\t// Prop        : option.highlight\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : true\r\n\t\t// Description : Renders the top highlight bar on the frame.\r\n\t\t//\r\n\t\t// Prop        : option.controls\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : true\r\n\t\t// Description : Renders the control bar.\r\n\t\t//\r\n\t\t// Prop        : option.footer\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : true\r\n\t\t// Description : Renders the footer. Must be true for pagination.\r\n\t\t//\r\n\t\t// Prop        : option.title\r\n\t\t// Value       : [STRING]\r\n\t\t// Default     : Null\r\n\t\t// Description : Display's a title at the top of the table.\r\n\t\t//\r\n\t\t// Prop        : option.views\r\n\t\t// Value       : [ARRAY]\r\n\t\t// Default     : Null\r\n\t\t// Description : List of available views that are in addition to the default. Each array item should be an object with column view details.\r\n\t\t//             : [\r\n\t\t//             :    {   // View #1\r\n\t\t//             :        viewName : 'My Awesome View',\r\n\t\t//             :        schema   :\r\n\t\t//             :        [\r\n\t\t//             :            {   // Column #1\r\n\t\t//\t\t\t   :\t        \tname          : [STRING] name of the column in the JSON data.\r\n\t\t//\t\t\t   :\t        \ttitle         : [STRING] title used in the table header.\r\n\t\t//\t\t\t   :\t        \twidth         : [NUMBER] used for the width of the column.\r\n\t\t//\t\t\t   :\t        \t\t          : When option.responsiveTable = FALSE --> Width provided will be PX.\r\n\t\t//             :                              : When option.responsiveTable = TRUE --> Width provided will be %.\r\n\t\t//\t \t\t   :\t        \torder         : [NUMBER] which defines the order of columns from left to right.\r\n\t\t//             :                sort          : [BOOLEAN] sets the column as the initially sorted column.\r\n\t\t// \t\t\t   :\t            sortDirection : [STRING] sets the direction of the initially sorted column: 'desc' or 'asc'.\r\n\t\t// \t\t\t   :\t        \ttype          : [STRING] which defines the type of data in the column. Options are: 'String' and 'Number'.\r\n\t\t// \t\t\t   :\t        \tfilterable    : [BOOLEAN] which determines if the column can be filtered.\r\n\t\t// \t\t\t   :\t        \tenabled       : [BOOLEAN] which determines if the column is shown/enabled on initial load.\r\n\t\t//             :            }, ...\r\n\t\t//             :        ]\r\n\t\t//             :    }, ...\r\n\t\t//             : ]\r\n\t\t//\r\n\t\t// EVENT ----\r\n\t\t//\r\n\t\t// Prop        : eventFromApp.name\r\n\t\t// Value       : [STRING]\r\n\t\t// Default     : ''\r\n\t\t// Description : Name of event you want to trigger on JD-Table.\r\n\t\t//\r\n\t\t// Prop        : eventFromApp.payload\r\n\t\t// Value       : [ANY]\r\n\t\t// Default     : NULL\r\n\t\t// Description : Optional payload for the event.\r\n\t\t//\r\n\t\t// Prop        : eventFromAppTrigger\r\n\t\t// Value       : [BOOLEAN]\r\n\t\t// Default     : FALSE\r\n\t\t// Description : Triggers the stored event in event.name/payload to execute.\r\n\r\n\t\tprops :\r\n\t\t{\r\n\t\t\toption :\r\n\t\t\t{\r\n\t\t\t\ttype    : Object,\r\n\t\t\t\tdefault : () => ({})\r\n\t\t\t},\r\n\r\n\t\t\teventFromApp :\r\n\t\t\t{\r\n\t\t\t\ttype    : Object,\r\n\t\t\t\tdefault : () =>\r\n\t\t\t\t({\r\n\t\t\t\t\tname    : null,\r\n\t\t\t\t\tpayload : null\r\n\t\t\t\t})\r\n\t\t\t},\r\n\r\n\t\t\teventFromAppTrigger :\r\n\t\t\t{\r\n\t\t\t\ttype    : Boolean,\r\n\t\t\t\tdefault : false\r\n\t\t\t},\r\n\r\n\t\t\tloader :\r\n\t\t\t{\r\n\t\t\t\ttype    : Boolean,\r\n\t\t\t\tdefault : true\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcreated : function ()\r\n\t\t{\r\n\t\t\tthis.polyfillClosest();\r\n\r\n\t\t\tthis.checkBrowser();\r\n\r\n\t\t\tthis.initializeTable();\r\n\t\t},\r\n\r\n\t\tmounted : function ()\r\n\t\t{\r\n\t\t\t// Add an event listener to watch for a window resize. If detected, re-render the list.\r\n\t\t\twindow.addEventListener( 'resize', this.resizeListener );\r\n\r\n\t\t\tif ( this.setting.contextMenuLeft || this.setting.contextMenuRight )\r\n\t\t\t{\r\n\t\t\t\tthis.initializeContextMenu();\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.setting.quickView )\r\n\t\t\t{\r\n\t\t\t\tthis.initializeQuickMenu();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// Clean up custom listeners.\r\n\t\tbeforeDestroy : function ()\r\n\t\t{\r\n\t\t\t// Context Listener - LEFT CLICK\r\n\t\t\tif ( this.setting.contextMenuLeft || this.setting.contextMenuRight )\r\n\t\t\t{\r\n\t\t\t\twindow.removeEventListener( \"click\", this.contextListenerLeftClick );\r\n\t\t\t}\r\n\r\n\t\t\t// Context Listener - RIGHT CLICK\r\n\t\t\tif ( this.setting.contextMenuRight )\r\n\t\t\t{\r\n\t\t\t\t// Register context menu (right click) event.\r\n\t\t\t\twindow.removeEventListener( \"contextmenu\", this.contextListenerRightClick );\r\n\t\t\t}\r\n\r\n\t\t\t// Quick Menu Listener\r\n\t\t\twindow.removeEventListener( \"click\", this.quickMenuListenerLeftClick );\r\n\r\n\t\t\t// Filter Dropdown\r\n\t\t\twindow.removeEventListener( 'mouseup', this.clearFilterDropdown, false );\r\n\r\n\t\t\t// Resize Listeners\r\n\t\t\twindow.removeEventListener( 'resize', this.resizeListener );\r\n\t\t\twindow.removeEventListener( 'mouseup', this.resizeStop , false );\r\n\t\t},\r\n\r\n\t\tmethods :\r\n\t\t{\r\n\t\t\t// Polyfills the element function \"closest\" (IE11).\r\n\t\t\tpolyfillClosest : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( window.Element && !Element.prototype.closest )\r\n\t\t\t\t{\r\n\t\t\t\t\tElement.prototype.closest = function ( s )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet matches = ( this.document || this.ownerDocument ).querySelectorAll( s ), i, el = this;\r\n\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ti = matches.length;\r\n\t\t\t\t\t\t\twhile ( --i >= 0 && matches.item( i ) !== el ) {};\r\n\t\t\t\t\t\t} while ( (i < 0) && ( el = el.parentElement ) );\r\n\r\n\t\t\t\t\t\treturn el;\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Configures the table according to the init props.\r\n\t\t\tinitializeTable : function ()\r\n\t\t\t{\r\n\t\t\t\t// Sets the rendering engine.\r\n\t\t\t\tconst INIT_ENGINE = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.rendering.engine = this.setting.renderEngine ? this.setting.renderEngine : 0;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Create reactive column settings.\r\n\t\t\t\tconst INIT_COLUMNS = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Ensure columns are defined.\r\n\t\t\t\t\tif ( typeof( this.setting.columns ) === 'object' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.setting.columns.forEach( ( userColumn, index ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( typeof( userColumn.name ) !== 'string' )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One of the defined columns does not have a name assigned.';\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( typeof( userColumn.title ) !== 'string' )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One of the defined columns does not have a title assigned.';\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( typeof( userColumn.order ) !== 'number' )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One of the defined columns does not have a order assigned.';\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( typeof( userColumn.type ) !== 'string' )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One of the defined columns does not have a type assigned.';\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Set column width value.\r\n\t\t\t\t\t\t\tlet columnWidth = null;\r\n\r\n\t\t\t\t\t\t\tif ( typeof( userColumn.width ) === 'number' )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcolumnWidth = userColumn.width;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Set initial visibility value.\r\n\t\t\t\t\t\t\tlet enabled = true;\r\n\r\n\t\t\t\t\t\t\tif ( typeof( userColumn.enabled ) === 'boolean' && !userColumn.enabled )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tenabled = false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Set filterable value.\r\n\t\t\t\t\t\t\tlet filterable = false;\r\n\r\n\t\t\t\t\t\t\tif ( typeof( userColumn.filterable ) === 'boolean' && userColumn.filterable )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfilterable = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis.$set( this.columns.list, index,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tname          : userColumn.name,\r\n\t\t\t\t\t\t\t\ttitle         : userColumn.title,\r\n\t\t\t\t\t\t\t\twidth         : columnWidth,\r\n\t\t\t\t\t\t\t\toriginalWidth : columnWidth,\r\n\t\t\t\t\t\t\t\torder         : userColumn.order,\r\n\t\t\t\t\t\t\t\ttype          : userColumn.type,\r\n\t\t\t\t\t\t\t\tfilterable    : filterable,\r\n\t\t\t\t\t\t\t\tenabled       : enabled,\r\n\t\t\t\t\t\t\t\theaderStyles  : {},\r\n\t\t\t\t\t\t\t\tdataStyles    : {},\r\n\t\t\t\t\t\t\t\tsort          : userColumn.sort ? userColumn.sort : false,\r\n\t\t\t\t\t\t\t\tsortDirection : userColumn.sortDirection ? userColumn.sortDirection : null,\r\n\t\t\t\t\t\t\t\tsortSpecial   : userColumn.sortSpecial ? userColumn.sortSpecial : null\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Sort the array based on the passed order.\r\n\t\t\t\t\t\tthis.columns.list.sort( ( a, b ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn a.order - b.order;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tlet viewLength = this.rendering.views.list.push\r\n\t\t\t\t\t\t({\r\n\t\t\t\t\t\t\tviewName : 'Default',\r\n\t\t\t\t\t\t\tschema   : []\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Create default view.\r\n\t\t\t\t\t\tthis.columns.list.forEach ( ( column ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( column.enabled )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.rendering.views.list[viewLength - 1].schema.push( column );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Sort the default view.\r\n\t\t\t\t\t\tthis.rendering.views.list[viewLength - 1].schema.sort( ( a, b ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn a.order - b.order;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Set the default view and active.\r\n\t\t\t\t\t\tthis.rendering.views.currentView = this.rendering.views.list[viewLength - 1];\r\n\r\n\t\t\t\t\t\tlet hasBeenSorted = false;\r\n\r\n\t\t\t\t\t\tthis.rendering.views.currentView.schema.forEach( ( viewColumn, viewIndex ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Sets the column as default sorted.\r\n\t\t\t\t\t\t\tif ( viewColumn.sort )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.columns.activeSortIndex    = viewIndex;\r\n\t\t\t\t\t\t\t\tthis.columns.activeSortName     = viewColumn.name;\r\n\t\t\t\t\t\t\t\tthis.columns.activeSortSpecial  = viewColumn.sortSpecial;\r\n\r\n\t\t\t\t\t\t\t\tif ( typeof( viewColumn.sortDirection ) === 'string' )\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = false;\r\n\r\n\t\t\t\t\t\t\t\t\tif ( viewColumn.sortDirection === 'asc' )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tthis.rendering.views.currentSelectedView = 'Default';\r\n\r\n\t\t\t\t\t\t// No sorting set, use first column.\r\n\t\t\t\t\t\tif ( !hasBeenSorted )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.columns.activeSortIndex    = 0;\r\n\t\t\t\t\t\t\tthis.columns.activeSortAsc      = true;\r\n\t\t\t\t\t\t\tthis.columns.activeSortName     = this.rendering.views.currentView.schema[0].name;\r\n\t\t\t\t\t\t\tthis.columns.activeSortSpecial  = this.rendering.views.currentView.schema[0].sortSpecial;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. Columns are not defined.'\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Determine maximized state.\r\n\t\t\t\tconst SETUP_MAXIMIZE = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.forceMaximized || this.setting.startMaximized )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.feature.maximized = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Check for table & column widths and calculate fixed table full width.\r\n\t\t\t\tconst SETUP_SIZES = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet noWidthColumns = 0;\r\n\r\n\t\t\t\t\t// Check how many columns have no width assigned.\r\n\t\t\t\t\tthis.columns.list.forEach( ( column ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( column.width === null )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnoWidthColumns++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// If the table should be responsive, but the sum of the widths is Greater/Equal To 100%. Throw an error.\r\n\t\t\t\t\tif ( this.setting.responsiveTable && this.tableWidth !== null && this.tableWidth > 100 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.status.tableError =  'Error: Invalid settings. The sum of the individual column widths is greater then 100%. Ensure your columns are balanced.'\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( !this.setting.responsiveFrame && this.setting.frameWidth === null )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.status.tableError =  'Error: Invalid settings. The setting frameWidth is not configured. In order to use responsiveTable = FALSE you must set a frameWidth. The frame will now operate @ 100% and not function correctly.'\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Set the column width for each column.\r\n\t\t\t\t\tthis.columns.list.forEach( ( column, index ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// If the column has an assigned width ..\r\n\t\t\t\t\t\tif ( column.width !== null )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// If the table is NOT responsive, the width is PX.\r\n\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'width', column.width + 'px' );\r\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'min-width', column.width + 'px' );\r\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'height', this.setting.headerHeight + 'px' );\r\n\r\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'width', column.width + 'px' );\r\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'min-width', column.width + 'px' );\r\n\r\n\t\t\t\t\t\t\t\tif ( this.setting.rowFlex )\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'min-height', this.setting.rowHeight + 'px' );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// If the table IS responsive, the width is %.\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'width', column.width + '%' );\r\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'width', column.width + '%' );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// If no width is assigned to the column ..\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// If the table is NOT responsive throw an error. This is because column widths are in PX.\r\n\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One or more of the columns does not have an assigned width. When the setting responsiveTable is set to false, all columns must have a specified width. Rendering table as responsive instead.';\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Calculate the width out of the remaining percentage.\r\n\t\t\t\t\t\t\tlet autoColumnWidth = ( 100 - this.tableWidth ) / noWidthColumns;\r\n\r\n\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'width', autoColumnWidth + '%' );\r\n\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'width', autoColumnWidth + '%' );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Initialize pagination settings.\r\n\t\t\t\tconst SETUP_PAGINATION = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.renderEngine === 2 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Sets the current page if none is set.\r\n\t\t\t\t\t\tconst INIT_CURRENT_PAGE = () =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( !this.rendering.pagination.currentPage )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.rendering.pagination.currentPage = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// Sets the current max number of rows per page if none is set.\r\n\t\t\t\t\t\tconst INIT_CURRENT_PAGE_ROWS = () =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( !this.rendering.pagination.currentPageRows )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.rendering.pagination.currentPageRows              = this.setting.paginationRowStart;\r\n\t\t\t\t\t\t\t\tthis.rendering.pagination.currentSelectedPageRowOption = this.setting.paginationRowStart;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t// Sets the options available for how many rows will appear on a page.\r\n\t\t\t\t\t\tconst SET_ROW_OPTIONS = () =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.rendering.pagination.pageRowOptions = this.setting.paginationRowLimits;\r\n\r\n\t\t\t\t\t\t\tif ( this.setting.paginationRowAll )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.rendering.pagination.pageRowOptions.push('All');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tINIT_CURRENT_PAGE();\r\n\t\t\t\t\t\tINIT_CURRENT_PAGE_ROWS();\r\n\t\t\t\t\t\tSET_ROW_OPTIONS();\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Force pagination for external data provider.\r\n\t\t\t\tconst DATA_PROVIDER_CHECK = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.setting.renderEngine === 0 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.status.tableError = 'Error: External data provider is only supported by the Pagination render engine. Please change your settings.';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Configure the search option.\r\n\t\t\t\tconst SETUP_SEARCH = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.forceSearchOpen )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.feature.searching = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Build views.\r\n\t\t\t\tconst BUILD_VIEWS = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.views.length > 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Validate view(s) format.\r\n\t\t\t\t\t\tthis.setting.views.forEach ( ( view, viewIndex ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// +1 is added to index because \"Default\" is the first (0).\r\n\t\t\t\t\t\t\tlet currentViewIndex = viewIndex + 1;\r\n\r\n\t\t\t\t\t\t\tif ( view.viewName.constructor.name === 'String' && view.schema.constructor.name === 'Array' && view.schema.length > 0 )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Create the view in the list.\r\n\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list, currentViewIndex,\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tviewName : view.viewName,\r\n\t\t\t\t\t\t\t\t\tschema   : []\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t// Set the column width for each column.\r\n\t\t\t\t\t\t\t\tview.schema.forEach( ( column, columnIndex ) =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema, columnIndex,\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tname          : column.name ? column.name : '',\r\n\t\t\t\t\t\t\t\t\t\ttitle         : column.title ? column.title : '',\r\n\t\t\t\t\t\t\t\t\t\twidth         : column.width ? column.width : null,\r\n\t\t\t\t\t\t\t\t\t\toriginalWidth : column.width ? column.width : null,\r\n\t\t\t\t\t\t\t\t\t\torder         : column.order ? column.order : null,\r\n\t\t\t\t\t\t\t\t\t\ttype          : column.type ? column.type : 'String',\r\n\t\t\t\t\t\t\t\t\t\tfilterable    : column.filterable ? column.filterable : false,\r\n\t\t\t\t\t\t\t\t\t\tenabled       : column.enabled ? column.enabled : false,\r\n\t\t\t\t\t\t\t\t\t\theaderStyles  : {},\r\n\t\t\t\t\t\t\t\t\t\tdataStyles    : {},\r\n\t\t\t\t\t\t\t\t\t\tsort          : column.sort ? column.sort : false,\r\n\t\t\t\t\t\t\t\t\t\tsortDirection : column.sortDirection ? column.sortDirection : null,\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\t// If the column has an assigned width ..\r\n\t\t\t\t\t\t\t\t\tif ( column.width !== null )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.rendering.views.list[currentViewIndex].schema[columnIndex].originalWidth = column.width;\r\n\r\n\t\t\t\t\t\t\t\t\t\t// If the table is NOT responsive, the width is PX.\r\n\t\t\t\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'width', column.width + 'px' );\r\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'min-width', column.width + 'px' );\r\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'height', this.setting.headerHeight + 'px' );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'width', column.width + 'px' );\r\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'min-width', column.width + 'px' );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ( this.setting.rowFlex )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'min-height', this.setting.rowHeight + 'px' );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t// If the table IS responsive, the width is %.\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'width', column.width + '%' );\r\n\t\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'width', column.width + '%' );\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// If no width is assigned to the column ..\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t// If the table is NOT responsive throw an error. This is because column widths are in PX.\r\n\t\t\t\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tthis.status.tableError = `Error: Invalid settings in view name: ${ view.viewName }. One or more of the columns does not have an assigned width. When the setting responsiveTable is set to false, all columns must have a specified width. Rendering table as responsive instead.`;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Calculate the width out of the remaining percentage.\r\n\t\t\t\t\t\t\t\t\t\tlet autoColumnWidth = ( 100 - this.tableWidth ) / noWidthColumns;\r\n\r\n\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].headerStyles, 'width', autoColumnWidth + '%' );\r\n\t\t\t\t\t\t\t\t\t\tthis.$set( this.rendering.views.list[currentViewIndex].schema[columnIndex].dataStyles, 'width', autoColumnWidth + '%' );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t// Sort the new view.\r\n\t\t\t\t\t\t\t\tthis.rendering.views.list[currentViewIndex].schema.sort( ( a, b ) =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn a.order - b.order;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: There was a problem validating a view configuration. Validate the JD-Table settings.';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tINIT_ENGINE();\r\n\t\t\t\tINIT_COLUMNS();\r\n\t\t\t\tSETUP_MAXIMIZE();\r\n\t\t\t\tSETUP_SIZES();\r\n\t\t\t\tSETUP_PAGINATION();\r\n\t\t\t\tSETUP_SEARCH();\r\n\t\t\t\tDATA_PROVIDER_CHECK();\r\n\t\t\t\tBUILD_VIEWS();\r\n\t\t\t},\r\n\r\n\t\t\t// Configures the table context menu (right/left click).\r\n\t\t\tinitializeContextMenu : function ()\r\n\t\t\t{\r\n\t\t\t\t// LEFT CLICK\r\n\t\t\t\tif ( this.setting.contextMenuLeft || this.setting.contextMenuRight )\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.addEventListener( \"click\", this.contextListenerLeftClick );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// RIGHT CLICK\r\n\t\t\t\tif ( this.setting.contextMenuRight )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Register context menu (right click) event.\r\n\t\t\t\t\twindow.addEventListener( \"contextmenu\", this.contextListenerRightClick );\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Emits the current state of the component.\r\n\t\t\temitState : function ()\r\n\t\t\t{\r\n\t\t\t\tthis.$emit( 'event-from-jd-table', this.componentState );\r\n\t\t\t},\r\n\r\n\t\t\t// JavaScript listener for resizing the window.\r\n\t\t\tresizeListener : function ( e )\r\n\t\t\t{\r\n\t\t\t\t// Clear the scrolling timer.\r\n\t\t\t\tclearTimeout( this.rendering.isResizing );\r\n\r\n\t\t\t\tthis.rendering.isResizing = setTimeout( () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// If auto rendering is the engine, re-render.\r\n\t\t\t\t\tif ( this.rendering.engine === 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.renderView( this.rendering.virtual.rowMiddleIndex );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.checkMobile();\r\n\t\t\t\t}, 750 );\r\n\t\t\t},\r\n\r\n\t\t\t// JavaScript listener for left clicking (context menu).\r\n\t\t\tcontextListenerLeftClick : function ( e )\r\n\t\t\t{\r\n\t\t\t\t// If the menu is visible already ..\r\n\t\t\t\tif ( this.status.contextMenu )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.hideContextMenu();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.setting.contextMenuLeft && e.target.closest( '.jd-body' ) )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Get the location of the right click.\r\n\t\t\t\t\tconst clickLocation =\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tleft : e.clientX,\r\n\t\t\t\t\t\ttop  : e.clientY\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Show the menu at the click location.\r\n\t\t\t\t\tthis.showContextMenu( clickLocation );\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// JavaScript listener for right clicking (context menu).\r\n\t\t\tcontextListenerRightClick : function ( e )\r\n\t\t\t{\r\n\t\t\t\t// If the click takes places in the table body ..\r\n\t\t\t\tif ( e.target.closest( '.jd-body' ) )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Prevent the regular menu.\r\n\t\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\t\t// Clear previous context (if any).\r\n\t\t\t\t\tif ( this.status.contextMenu )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.hideContextMenu();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Close any feature menu.\r\n\t\t\t\t\tthis.featureAction( null );\r\n\r\n\t\t\t\t\t// Get the location of the right click.\r\n\t\t\t\t\tconst clickLocation =\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tleft : e.clientX,\r\n\t\t\t\t\t\ttop  : e.clientY\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Show the menu at the click location.\r\n\t\t\t\t\tthis.showContextMenu( clickLocation );\r\n\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// JavaScript listener for left clicking (quick menu).\r\n\t\t\tquickMenuListenerLeftClick : function ( e )\r\n\t\t\t{\r\n\t\t\t\t// Don't run this when clicking in the table body.\r\n\t\t\t\tif ( !e.target.closest( '.jd-body' ) )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Ensure user clicks outside the popup window.\r\n\t\t\t\t\tif ( this.row.selectedIndex !== null && e.target.classList.contains('jd-layerPopup') )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.quickViewClose();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Configures a click listener to close quick menu when clicked out of it.\r\n\t\t\tinitializeQuickMenu : function ()\r\n\t\t\t{\r\n\t\t\t\twindow.addEventListener( \"click\", this.quickMenuListenerLeftClick );\r\n\t\t\t},\r\n\r\n\t\t\t// Enables the context menu at the coordinates passed.\r\n\t\t\tshowContextMenu : function ( { top, left } )\r\n\t\t\t{\r\n\t\t\t\t// Close any feature menu.\r\n\t\t\t\tthis.featureAction( null );\r\n\r\n\t\t\t\tthis.$refs.jd_contextMenu.style.left = `${ left }px`;\r\n\t\t\t\tthis.$refs.jd_contextMenu.style.top  = `${ top }px`;\r\n\r\n\t\t\t\t// Update the index of the row right clicked on.\r\n\t\t\t\tthis.row.activeContextIndex   = this.row.activeHoverIndex;\r\n\t\t\t\tthis.row.activeContextElement = this.row.activeHoverElement;\r\n\r\n\t\t\t\t// Make the row red.\r\n\t\t\t\tthis.row.activeContextElement.classList.add('jd-rowSelect');\r\n\r\n\t\t\t\t// Show the context menu,\r\n\t\t\t\tthis.status.contextMenu = true;\r\n\r\n\t\t\t\t// Context menu position correction.\r\n\t\t\t\tsetTimeout( () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet contextWidth  = this.$refs.jd_contextMenu.offsetWidth;\r\n\t\t\t\t\tlet contextHeight = this.$refs.jd_contextMenu.offsetHeight;\r\n\t\t\t\t\tlet windowWidth   = window.innerWidth;\r\n\t\t\t\t\tlet windowHeight  = window.innerHeight;\r\n\r\n\t\t\t\t\tif ( ( windowWidth - left ) < contextWidth )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 21 is subtracted to compensate for a scrollbar.\r\n\t\t\t\t\t\tthis.$refs.jd_contextMenu.style.left = ( windowWidth - contextWidth ) - 21 + \"px\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( (windowHeight - top ) < contextHeight )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// 21 is subtracted to compensate for a scrollbar.\r\n\t\t\t\t\t\tthis.$refs.jd_contextMenu.style.top = ( windowHeight - contextHeight ) - 21 + \"px\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, 50, { top, left } );\r\n\t\t\t},\r\n\r\n\t\t\t// Disabled (hides) the context menu.\r\n\t\t\thideContextMenu : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.row.selectedIndex === null )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Remove the row red.\r\n\t\t\t\t\tthis.row.activeContextElement.classList.remove('jd-rowSelect');\r\n\r\n\t\t\t\t\t// Update the index of the row right clicked on.\r\n\t\t\t\t\tthis.row.activeContextIndex   = null;\r\n\t\t\t\t\tthis.row.activeContextElement = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.status.contextMenu = false;\r\n\t\t\t},\r\n\r\n\t\t\t// Manages all feature actions.\r\n\t\t\tfeatureAction : function ( name )\r\n\t\t\t{\r\n\t\t\t\t// Switches the maximize flag.\r\n\t\t\t\tconst MAXIMIZE = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.feature.maximized = !this.feature.maximized;\r\n\r\n\t\t\t\t\t// Virtual Scroll: Re-render the rows based on the new window size.\r\n\t\t\t\t\tif ( this.rendering.engine === 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.renderView( this.rendering.virtual.rowMiddleIndex );\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Shows/hides the search input field.\r\n\t\t\t\tconst SEARCH = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( !this.setting.forceSearchOpen )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.feature.searching = !this.feature.searching;\r\n\r\n\t\t\t\t\t\tif ( this.feature.searching )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Waits for the search bar to be visible then focuses it.\r\n\t\t\t\t\t\t\tsetTimeout( () =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.$refs.searchField.focus();\r\n\t\t\t\t\t\t\t}, 150)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Emits a add new event to the parent.\r\n\t\t\t\tconst ADDNEW = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'AddItem';\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Emits a add new event to the parent.\r\n\t\t\t\tconst VIEWITEM = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.contextView();\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Emits a add new event to the parent.\r\n\t\t\t\tconst EDITITEM = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.contextEdit();\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Emits a add new event to the parent.\r\n\t\t\t\tconst DELETEITEM = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.contextDelete();\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Emits a refresh event to the parent.\r\n\t\t\t\tconst REFRESH = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'Refresh';\r\n\r\n\t\t\t\t\t// Update table status.\r\n\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Show/Hide the filtering view.\r\n\t\t\t\tconst FILTER = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.filters.show = !this.filters.show;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Clean up any filter interface/variable settings when a feature button is pressed.\r\n\t\t\t\tconst FILTER_CLEAN_UP = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Reset any filter errors that may exist.\r\n\t\t\t\t\tthis.filters.error     = false;\r\n\t\t\t\t\tthis.filters.errorText = '';\r\n\r\n\t\t\t\t\t// Clear filters if shown.\r\n\t\t\t\t\tif ( this.filters.show )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.filters.show = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Show/Hide the column selection.\r\n\t\t\t\tconst COLUMNS = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.columns.selecting = !this.columns.selecting;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Clean up any column selection interface/variable settings when feature button is pressed.\r\n\t\t\t\tconst COLUMNS_CLEAN_UP = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.columns.selecting = false;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Show/hide the pagination row changing option.\r\n\t\t\t\tconst PAGINATION = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.rendering.pagination.changingRows = !this.rendering.pagination.changingRows;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Clean up any pagination row changing options.\r\n\t\t\t\tconst PAGINATION_CLEAN_UP = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.rendering.pagination.changingRows = false;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Clean up any view row changing options.\r\n\t\t\t\tconst VIEW_CLEAN_UP = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.rendering.views.changingViews = false;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Show/hide the view changing option.\r\n\t\t\t\tconst VIEW = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.rendering.views.changingViews = !this.rendering.views.changingViews;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Exports the current available data to excel.\r\n\t\t\t\tconst EXPORT = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'ExcelExport';\r\n\r\n\t\t\t\t\t// Check if a limit is set.\r\n\t\t\t\t\tif ( this.setting.exportLimit )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet dataSize = null;\r\n\r\n\t\t\t\t\t\tconst checkExportLimit = () =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( this.setting.dataProvider !== 1 && this.processedData.length > this.setting.exportLimit )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tdataSize = this.formatNumberWithCommas( this.processedData.length );\r\n\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst checkExportLimitExternal = () =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( this.setting.dataProvider === 1 && this.processedDataSize > this.setting.exportLimit )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tdataSize = this.formatNumberWithCommas( this.processedDataSize );\r\n\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( checkExportLimit() || checkExportLimitExternal() )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\talert(`Sorry, you can only export a maximum of ${ this.formatNumberWithCommas( this.setting.exportLimit ) } records at a time. There are currently ${ dataSize } records in your table. Try filtering the records down further to use this feature.`)\r\n\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'processingData', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.exportExcel( this.processedData );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif ( name === 'MaxMinimize' )\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tMAXIMIZE();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'Search' )\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tSEARCH();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'AddNew' )\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tADDNEW();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'ViewItem' )\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tVIEWITEM();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'EditItem' )\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tEDITITEM();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'DeleteItem' )\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tDELETEITEM();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'Refresh' )\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tREFRESH();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'Columns' )\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tCOLUMNS();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'Filter' )\r\n\t\t\t\t{\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tFILTER();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'Pagination' )\r\n\t\t\t\t{\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tPAGINATION();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'Export' )\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\r\n\t\t\t\t\tEXPORT();\r\n\t\t\t\t}\r\n\t\t\t\telse if ( name === 'View' )\r\n\t\t\t\t{\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\r\n\t\t\t\t\tVIEW();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tFILTER_CLEAN_UP();\r\n\t\t\t\t\tCOLUMNS_CLEAN_UP();\r\n\t\t\t\t\tPAGINATION_CLEAN_UP();\r\n\t\t\t\t\tVIEW_CLEAN_UP();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Exports data to excel. Supports IE.\r\n\t\t\texportExcel : function ( data )\r\n\t\t\t{\r\n\t\t\t\t// Creates a HTML table to be exported.\r\n\t\t\t\tconst renderTable = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet table = '<table><thead>';\r\n\r\n\t\t\t\t\ttable += '<tr>';\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < this.columns.list.length; i++ )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst column = this.columns.list[i];\r\n\r\n\t\t\t\t\t\ttable += '<th>';\r\n\r\n\t\t\t\t\t\tif ( typeof( column.title ) === 'undefined' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttable += column.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttable += column.title;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttable += '</th>';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttable += '</tr>';\r\n\r\n\t\t\t\t\ttable += '</thead><tbody>';\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < data.length; i++ )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst row = data[i];\r\n\r\n\t\t\t\t\t\ttable += '<tr>';\r\n\r\n\t\t\t\t\t\tfor ( let j = 0; j < this.columns.list.length; j++ )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst column = this.columns.list[j];\r\n\r\n\t\t\t\t\t\t\ttable += '<td>';\r\n\t\t\t\t\t\t\ttable += row[column.name];\r\n\t\t\t\t\t\t\ttable += '</td>';\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttable += '</tr>';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttable += '</tbody></table>';\r\n\r\n\t\t\t\t\treturn table;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet userAgent      = window.navigator.userAgent;\r\n\t\t\t\tlet browserDetails = userAgent.indexOf(\"MSIE \");\r\n\r\n\t\t\t\tif ( browserDetails > 0 || !!navigator.userAgent.match( /Trident.*rv\\:11\\./ ) )\r\n\t\t\t\t{\r\n\t\t\t\t\texcelExportArea.document.open( \"txt/html\",\"replace\" );\r\n\t\t\t\t\texcelExportArea.document.write( renderTable() );\r\n\t\t\t\t\texcelExportArea.document.close();\r\n\t\t\t\t\texcelExportArea.focus();\r\n\r\n\t\t\t\t\texcelExportArea.document.execCommand( \"SaveAs\",true,\"Data_Export.xls\" );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\twindow.open( 'data:application/vnd.ms-excel,' + encodeURIComponent( renderTable() ) );\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Processes the raw data through filters/search. This returns a promise.\r\n\t\t\tprocessData : function ()\r\n\t\t\t{\r\n\t\t\t\treturn new Promise( ( resolve, reject ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// External Data - Just copy to processedData.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.processedData = this.data;\r\n\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Internal Data - Process through search/filter.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Timeout ensures processing message.\r\n\t\t\t\t\t\tsetTimeout( () =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet processedData = this.data;\r\n\r\n\t\t\t\t\t\t\t// ---------\r\n\t\t\t\t\t\t\t// SEARCHING\r\n\t\t\t\t\t\t\t// ---------\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t// Search terms filter all of the data that JD-Table has. This means search happens before filtering.\r\n\r\n\t\t\t\t\t\t\t// Clean the search term.\r\n\t\t\t\t\t\t\tlet searchTerm = this.search.text.trim().toLowerCase();\r\n\r\n\t\t\t\t\t\t\t// If a search term exists, search it.\r\n\t\t\t\t\t\t\tif ( searchTerm )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Indicate that searching is being done.\r\n\t\t\t\t\t\t\t\tthis.search.searching = true;\r\n\r\n\t\t\t\t\t\t\t\tprocessedData = processedData.filter ( ( row ) =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Define the search pattern for various column type date: String/Number/Array.\r\n\t\t\t\t\t\t\t\t\tconst searchAlgorithm = ( column ) =>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t// Search a column which is made up of an array or strings.\r\n\t\t\t\t\t\t\t\t\t\tif ( column.type === 'Array' )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tlet searchMatch = false;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ( row[column.name] && row[column.name].length > 0 )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t// For each item in the row/column.\r\n\t\t\t\t\t\t\t\t\t\t\t\trow[column.name].forEach( ( item ) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet searchText = String( item ).toLowerCase();\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Casts number variables to strings to make the searchable with Strings.\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tif ( !searchMatch && searchText.includes( searchTerm ) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsearchMatch = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\treturn searchMatch;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t// Search a column which is made up of strings or numbers.\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tlet searchText = String( row[column.name] ).toLowerCase();\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// Casts number variables to strings to make the searchable with Strings.\r\n\t\t\t\t\t\t\t\t\t\t\tif ( searchText.includes( searchTerm ) )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t\t// If the search algorithm function returns true, that row is kept (not excluded from results).\r\n\t\t\t\t\t\t\t\t\treturn this.columns.list.find( searchAlgorithm );\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Indicate that searching is NOT being done.\r\n\t\t\t\t\t\t\t\tthis.search.searching = false;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// ---------\r\n\t\t\t\t\t\t\t// FILTERING\r\n\t\t\t\t\t\t\t// ---------\r\n\t\t\t\t\t\t\t//\r\n\t\t\t\t\t\t\t// Filters are applied using the following rules:\r\n\t\t\t\t\t\t\t// - Filters with the same column are grouped together and use the OR condition (excluding < and > which are AND)\r\n\t\t\t\t\t\t\t// \t - Filter #1: 'Column1' --> 'Equals To' --> 'John'\r\n\t\t\t\t\t\t\t//   - Filter #2: 'Column1' --> 'Equals To' --> 'Peter'\r\n\t\t\t\t\t\t\t//   - Applied: Show rows where 'Column1' --> 'Equals To' --> 'John' OR 'Peter'\r\n\t\t\t\t\t\t\t// - Filters applied to different columns use AND condition.\r\n\t\t\t\t\t\t\t//   - Filter #1: 'Column1' --> 'Equals To' --> 'John'\r\n\t\t\t\t\t\t\t//   - Filter #2: 'Column2' --> 'Equals To' --> '$100.00'\r\n\t\t\t\t\t\t\t//   - Applied: Show rows where 'Column1' --> 'Equals To' --> 'John' AND 'Column2' 'Equals To' --> '$100.00'\r\n\t\t\t\t\t\t\tif ( this.filtering )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet tempData = [];\r\n\r\n\t\t\t\t\t\t\t\t// Returns a unique array of column names that are actively filtered.\r\n\t\t\t\t\t\t\t\tconst UNIQUE_FILTER_COLUMNS = () =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlet columnSet     = new Set( this.filters.active.map( ( filter ) => filter.column.name ) );\r\n\t\t\t\t\t\t\t\t\tlet uniqueColumns = [];\r\n\r\n\t\t\t\t\t\t\t\t\tcolumnSet.forEach( ( column ) =>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tuniqueColumns.push( column );\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\treturn uniqueColumns;\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t// Performs filter: Equals To (String Based).\r\n\t\t\t\t\t\t\t\tconst FILTER_EQUALS_TO = ( row, columnFilter ) =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase() === String(columnFilter.value).toLowerCase() );\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t// Performs filter: Not Equals To (String Based).\r\n\t\t\t\t\t\t\t\tconst FILTER_NOT_EQUALS_TO = ( row, columnFilter ) =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase() !== String(columnFilter.value).toLowerCase() );\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t// Performs filter: Begins With (String Based).\r\n\t\t\t\t\t\t\t\tconst FILTER_BEGINS_WITH = ( row, columnFilter ) =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase().startsWith(String(columnFilter.value).toLowerCase()) );\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t// Performs filter: Contains (String Based).\r\n\t\t\t\t\t\t\t\tconst FILTER_CONTAINS = ( row, columnFilter ) =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase().includes( String( columnFilter.value ).toLowerCase() ) );\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t// Performs filter: Greater and Less/Equal To (Number Based).\r\n\t\t\t\t\t\t\t\tconst FILTER_GREATER_LESS_THAN = ( row, columnName, greaterThanValue, lessThanValue ) =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tlet columnNumber = Number( row[columnName] );\r\n\r\n\t\t\t\t\t\t\t\t\tif ( greaterThanValue && lessThanValue )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif ( columnNumber >= greaterThanValue && columnNumber <= lessThanValue )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ( greaterThanValue && !lessThanValue )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif ( columnNumber >= greaterThanValue )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ( !greaterThanValue && lessThanValue )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif ( columnNumber <= lessThanValue )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t// Cycle through the unique column filters.\r\n\t\t\t\t\t\t\t\tUNIQUE_FILTER_COLUMNS().forEach( ( columnName, index ) =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Will hold the data that will be filtered.\r\n\t\t\t\t\t\t\t\t\tlet dataToBeFiltered = [];\r\n\r\n\t\t\t\t\t\t\t\t\t// Will hold the new set of filtered data.\r\n\t\t\t\t\t\t\t\t\tlet newFilteredData = [];\r\n\r\n\t\t\t\t\t\t\t\t\t// On first pass (for the first column), use all the data available.\r\n\t\t\t\t\t\t\t\t\tif ( index === 0 )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tdataToBeFiltered = processedData;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// On second pass (next column) use existing filtered data.\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tdataToBeFiltered = tempData;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t// Get all of the filters for the given column.\r\n\t\t\t\t\t\t\t\t\tlet columnFilters = this.filters.active.filter( ( filter ) =>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn filter.column.name === columnName;\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\t// Stores numeric comparison values.\r\n\t\t\t\t\t\t\t\t\tlet greaterThanValue = null;\r\n\t\t\t\t\t\t\t\t\tlet lessThanValue    = null;\r\n\r\n\t\t\t\t\t\t\t\t\t// Check for Greater/Equal To / Less/Equal To filters which should be grouped.\r\n\t\t\t\t\t\t\t\t\tcolumnFilters.forEach( ( columnFilter ) =>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t// Store greater then for\r\n\t\t\t\t\t\t\t\t\t\tif ( columnFilter.option === 'Greater/Equal To' )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tgreaterThanValue = columnFilter.value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ( columnFilter.option === 'Less/Equal To' )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tlessThanValue = columnFilter.value;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\t// For each row of data, check the column filter. If any single filter passes, add the row and move to the next.\r\n\t\t\t\t\t\t\t\t\tdataToBeFiltered.forEach( ( row, index ) =>\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t// Indicates if the row has been added to the newly filtered array.\r\n\t\t\t\t\t\t\t\t\t\tlet hasBeenPushed = false;\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Process string based filters.\r\n\t\t\t\t\t\t\t\t\t\tcolumnFilters.forEach( ( columnFilter ) =>\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Equals To\r\n\t\t\t\t\t\t\t\t\t\t\tif ( columnFilter.option === 'Equals To' )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_EQUALS_TO( row, columnFilter ) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Contains\r\n\t\t\t\t\t\t\t\t\t\t\tif ( !hasBeenPushed && columnFilter.option === 'Contains' )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_CONTAINS( row, columnFilter ) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Not Equals To\r\n\t\t\t\t\t\t\t\t\t\t\tif ( !hasBeenPushed && columnFilter.option === 'Not Equals To' )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_NOT_EQUALS_TO( row, columnFilter ) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Begins With\r\n\t\t\t\t\t\t\t\t\t\t\tif ( !hasBeenPushed && columnFilter.option === 'Begins With' )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_BEGINS_WITH( row, columnFilter ) )\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\t\t// Check if there are numeric specific operations.\r\n\t\t\t\t\t\t\t\t\t\tif ( greaterThanValue || lessThanValue )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_GREATER_LESS_THAN( row, columnName, greaterThanValue, lessThanValue ) )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t\t// Replace the tempData with the newly filtered data.\r\n\t\t\t\t\t\t\t\t\ttempData = newFilteredData;\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\tprocessedData = tempData;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis.processedData = processedData;\r\n\r\n\t\t\t\t\t\t\t// Stop processing visual.\r\n\t\t\t\t\t\t\tthis.updateStatus( 'processingData', false );\r\n\r\n\t\t\t\t\t\t\t// End the promise.\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t}, 75);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t// Processes the passed event.\r\n\t\t\tprocessEvent : function ( name )\r\n\t\t\t{\r\n\t\t\t\t// Process the data sent to JD-Table.\r\n\t\t\t\tif ( !this.status.tableError && name === 'sendData' )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet eventError = false;\r\n\r\n\t\t\t\t\t// Clear the current view.\r\n\t\t\t\t\tthis.currentTableData = [];\r\n\r\n\t\t\t\t\t// Internal Data\r\n\t\t\t\t\tif ( this.setting.dataProvider === 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.eventFromApp.payload !== null && this.eventFromApp.payload.constructor.name === 'Array' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( this.eventFromApp.payload.length > 0 )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Assign the data to the component.\r\n\t\t\t\t\t\t\t\tthis.data = this.eventFromApp.payload;\r\n\r\n\t\t\t\t\t\t\t\t// Reset scroll position.\r\n\t\t\t\t\t\t\t\tthis.resetScroll();\r\n\r\n\t\t\t\t\t\t\t\t// Process the data through filters/search.\r\n\t\t\t\t\t\t\t\tthis.processData().then( () =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Render the data.\r\n\t\t\t\t\t\t\t\t\tthis.renderView();\r\n\r\n\t\t\t\t\t\t\t\t\tif ( typeof this.eventFromApp.componentState !== 'undefined' )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.changeState( this.eventFromApp.componentState );\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tthis.tableReady = true;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.currentTableData = [];\r\n\r\n\t\t\t\t\t\t\t\tthis.tableReady = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\teventError = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// External Data\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.eventFromApp.payload !== null && this.eventFromApp.payload.constructor.name === 'Object' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( this.eventFromApp.payload.data.length > 0 )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Assign the results true length.\r\n\t\t\t\t\t\t\t\tthis.rendering.external.dataSize = this.eventFromApp.payload.count;\r\n\r\n\t\t\t\t\t\t\t\t// Assign the data to the component.\r\n\t\t\t\t\t\t\t\tthis.data = this.eventFromApp.payload.data;\r\n\r\n\t\t\t\t\t\t\t\t// Process the data through filters/search.\r\n\t\t\t\t\t\t\t\tthis.processData().then( () =>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Render the data.\r\n\t\t\t\t\t\t\t\t\tthis.renderView();\r\n\r\n\t\t\t\t\t\t\t\t\tif ( typeof this.eventFromApp.componentState !== 'undefined' )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.changeState( this.eventFromApp.componentState );\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tthis.tableReady = true;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.currentTableData = [];\r\n\r\n\t\t\t\t\t\t\t\tthis.tableReady = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\teventError = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Clear any messaging/statuses.\r\n\t\t\t\t\tthis.updateStatus( null, null );\r\n\r\n\t\t\t\t\tif ( eventError )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.status.tableError = 'Error: sendData event issue. Payload is null or improperly formatted.';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Reset table (Clear All)\r\n\t\t\t\tif ( !this.status.tableError && name === 'clearAll' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.clearTable();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Displays a table error.\r\n\t\t\t\tif ( !this.status.tableError && name === 'tableError' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.status.tableError = this.eventFromApp.payload;\r\n\r\n\t\t\t\t\t// Clear any messaging/statuses.\r\n\t\t\t\t\tthis.updateStatus( null, null );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Exports passed data to excel.\r\n\t\t\t\tif ( !this.status.tableError && name === 'exportExcel' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.exportExcel( this.eventFromApp.payload );\r\n\r\n\t\t\t\t\t// Clear any messaging/statuses.\r\n\t\t\t\t\tthis.updateStatus( null, null );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Sets the component state.\r\n\t\t\t\tif ( !this.status.tableError && name === 'setState' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.eventFromApp.componentState !== null && this.eventFromApp.componentState.constructor.name === 'Object' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.changeState( this.eventFromApp.componentState );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Updates the state of JD-Table\r\n\t\t\tchangeState : function ( newState )\r\n\t\t\t{\r\n\t\t\t\t// Search Text\r\n\t\t\t\tif ( typeof newState.searchText !== 'undefined' && newState.searchText )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.search.text = String ( newState.searchText );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Searching\r\n\t\t\t\tif ( typeof newState.searchApplied !== 'undefined' && newState.searchApplied !== null && newState.searchApplied.constructor.name === 'Boolean' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.performSearch();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Active Filters\r\n\t\t\t\tif ( typeof newState.filterApplied !== 'undefined' && newState.filterApplied !== null && newState.filterApplied.constructor.name === 'Array' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.filters.active = newState.filterApplied;\r\n\r\n\t\t\t\t\t// Process the data through filters/search.\r\n\t\t\t\t\tthis.processData().then( () =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Render the new view.\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Page Limit\r\n\t\t\t\tif ( typeof newState.pageLimit !== 'undefined' && newState.pageLimit !== null && newState.pageLimit.constructor.name === 'Number' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.changePageRows( newState.pageLimit )\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Current Page\r\n\t\t\t\tif ( typeof newState.currentPage !== 'undefined' && newState.currentPage !== null && newState.currentPage.constructor.name === 'Number' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.rendering.pagination.currentPage = newState.currentPage;\r\n\r\n\t\t\t\t\t// Re-render the view.\r\n\t\t\t\t\tthis.renderView();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Column Sort\r\n\t\t\t\tif ( typeof newState.sortColumnIndex !== 'undefined' && newState.sortColumnIndex !== null && newState.sortColumnIndex.constructor.name === 'Number' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.columns.activeSortIndex = newState.sortColumnIndex;\r\n\r\n\t\t\t\t\t// Sorted Direction\r\n\t\t\t\t\tif ( typeof newState.sortDirection !== 'undefined' && newState.sortDirection !== null && newState.sortDirection.constructor.name === 'String' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( newState.sortDirection === 'ASC' )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.columns.activeSortAsc = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.columns.activeSortAsc = false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Re-render the view.\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Current Selected View\r\n\t\t\t\tif ( typeof newState.currentView !== 'undefined' && newState.currentView !== null )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.changeView( newState.currentView );\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Renders the correct view based on the data and rendering engine setting.\r\n\t\t\trenderView : function ( renderPosition = 0 )\r\n\t\t\t{\r\n\t\t\t\t// Start processing visual.\r\n\t\t\t\tthis.updateStatus( 'processingData', true );\r\n\r\n\t\t\t\t// Timeout ensures processing message.\r\n\t\t\t\tsetTimeout( () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Check mobile size.\r\n\t\t\t\t\tthis.checkMobile();\r\n\r\n\t\t\t\t\t// Sort the data.\r\n\t\t\t\t\tthis.sortData();\r\n\r\n\t\t\t\t\tif ( this.processedDataSize > 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Rendering Engine: Auto\r\n\t\t\t\t\t\tif ( this.setting.renderEngine === 0 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Render full.\r\n\t\t\t\t\t\t\tif ( this.processedDataSize <= this.setting.virtualEngineRowStart )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.rendering.engine = 1;\r\n\r\n\t\t\t\t\t\t\t\tthis.renderViewAll();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Render virtual.\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.rendering.engine = 0;\r\n\r\n\t\t\t\t\t\t\t\tthis.renderViewVirtual( renderPosition );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Render All.\r\n\t\t\t\t\t\t\tif ( this.setting.renderEngine === 1 )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.rendering.engine = 1;\r\n\r\n\t\t\t\t\t\t\t\tthis.renderViewAll();\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Render Pagination\r\n\t\t\t\t\t\t\tif ( this.setting.renderEngine === 2 )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.rendering.engine = 2;\r\n\r\n\t\t\t\t\t\t\t\tthis.renderPagination();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.currentTableData = [];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.checkBodyScroll();\r\n\r\n\t\t\t\t\t// Stop processing visual.\r\n\t\t\t\t\tthis.updateStatus( 'processingData', false );\r\n\t\t\t\t}, 80 );\r\n\t\t\t},\r\n\r\n\t\t\t// Render all the data passed to JD-Table.\r\n\t\t\trenderViewAll : function ()\r\n\t\t\t{\r\n\t\t\t\tlet fullView = [];\r\n\r\n\t\t\t\tif ( this.processedDataSize > 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.processedData.forEach ( ( row, index ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfullView.push\r\n\t\t\t\t\t\t({\r\n\t\t\t\t\t\t\tindex : index,\r\n\t\t\t\t\t\t\tdata  : row\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.currentTableData = fullView;\r\n\t\t\t},\r\n\r\n\t\t\t// Renders the virtual view based on the passed position.\r\n\t\t\trenderViewVirtual : function ( renderPosition )\r\n\t\t\t{\r\n\t\t\t\t// Calculate the virtual render buffer size. This # of items will be loaded before and after the view.\r\n\t\t\t\tconst VIRTUAL_BUFFER_SIZE = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Set the buffer size to 5 times the amount of rows that fit in the view.\r\n\t\t\t\t\treturn this.getRowsInView() * this.rendering.virtual.virtualBufferSize;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Determines if the renderPosition is near the start of the list.\r\n\t\t\t\tconst VIRTUAL_START_ZONE = ( position ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ( position <= VIRTUAL_BUFFER_SIZE() );\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Determines if the renderPosition is near the end of the list.\r\n\t\t\t\tconst VIRTUAL_END_ZONE = ( position ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ( position >= ( this.processedDataSize - 1 ) || position >= (this.processedDataSize - VIRTUAL_BUFFER_SIZE() ) );\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet updatedView = [];\r\n\r\n\t\t\t\t// Set the virtual height div.\r\n\t\t\t\tthis.rendering.virtual.height = 0;\r\n\r\n\t\t\t\tif ( this.processedDataSize > 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the virtual height div.\r\n\t\t\t\t\tthis.rendering.virtual.height = this.processedDataSize * this.setting.rowHeight;\r\n\r\n\t\t\t\t\tlet startPosition = renderPosition - VIRTUAL_BUFFER_SIZE();\r\n\t\t\t\t\tlet endPosition   = renderPosition + VIRTUAL_BUFFER_SIZE() + this.getRowsInView();\r\n\r\n\t\t\t\t\t// If the render position is in the start zone, set to 0 (beginning) of data.\r\n\t\t\t\t\tif ( VIRTUAL_START_ZONE( startPosition ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstartPosition = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// If the render position is in the end zone, set to the last data item (end).\r\n\t\t\t\t\tif ( VIRTUAL_END_ZONE( endPosition ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tendPosition = this.processedDataSize - 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Update the currently rendered top row (index).\r\n\t\t\t\t\tthis.rendering.virtual.rowTopIndex = startPosition;\r\n\r\n\t\t\t\t\t// Update the currently rendered bottom row (index).\r\n\t\t\t\t\tthis.rendering.virtual.rowBottomIndex = endPosition;\r\n\r\n\t\t\t\t\t// Update the currently rendered position.\r\n\t\t\t\t\tthis.rendering.virtual.rowMiddleIndex = renderPosition;\r\n\r\n\t\t\t\t\tfor ( let i = startPosition; i <= endPosition; i++ )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Add item to end of view.\r\n\t\t\t\t\t\tupdatedView.push\r\n\t\t\t\t\t\t({\r\n\t\t\t\t\t\t\tindex : i,\r\n\t\t\t\t\t\t\tdata  : this.processedData[i]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Set the next render positions (top/bottom).\r\n\t\t\t\t\tthis.setRenderPositions();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.currentTableData = updatedView;\r\n\t\t\t},\r\n\r\n\t\t\t// Renders a set amount of records per page.\r\n\t\t\trenderPagination : function ()\r\n\t\t\t{\r\n\t\t\t\t// Sets the available pages based on the data size and rows per page.\r\n\t\t\t\tconst SET_AVAILABLE_PAGES = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.rendering.pagination.availablePages = Math.ceil( this.processedDataSize / this.rendering.pagination.currentPageRows );\r\n\r\n\t\t\t\t\tif ( this.rendering.pagination.currentPage > this.rendering.pagination.availablePages )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.rendering.pagination.currentPage = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Returns the rows that should be in the current view based ont he page.\r\n\t\t\t\tconst GET_ROWS_IN_PAGE = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet pageView   = [];\r\n\t\t\t\t\tlet startIndex = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows ) - this.rendering.pagination.currentPageRows;\r\n\t\t\t\t\tlet endIndex   = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows );\r\n\r\n\t\t\t\t\t// Correction for external data.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 && this.processedDataSize )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstartIndex = 0;\r\n\t\t\t\t\t\tendIndex   = this.processedData.length;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// End index correction.\r\n\t\t\t\t\tif ( endIndex > this.processedDataSize )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tendIndex = this.processedDataSize;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( let i = startIndex; i < endIndex; i++ )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Add item to end of view.\r\n\t\t\t\t\t\tpageView.push\r\n\t\t\t\t\t\t({\r\n\t\t\t\t\t\t\tindex : i,\r\n\t\t\t\t\t\t\tdata  : this.processedData[i]\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( pageView.length > 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.rendering.pagination.currentStartIndex = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows ) - this.rendering.pagination.currentPageRows;\r\n\t\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex   = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows );\r\n\r\n\t\t\t\t\t\t\t// End index correction for last page\r\n\t\t\t\t\t\t\tif ( this.rendering.pagination.currentEndIndex > this.processedDataSize )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex = this.processedDataSize;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.rendering.pagination.currentStartIndex = startIndex;\r\n\t\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex   = endIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.rendering.pagination.currentStartIndex = 0;\r\n\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex   = 0;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn pageView;\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Sets the left and right page options for the footer.\r\n\t\t\t\tconst SET_PAGE_OPTIONS = () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet leftPages       = [];\r\n\t\t\t\t\tlet rightPages      = [];\r\n\t\t\t\t\tlet sideQuantity    = this.setting.pageSideQuantity;\r\n\r\n\t\t\t\t\t// Correct the side quantity if there aren't enough pages to fulfill it.\r\n\t\t\t\t\tif ( ( sideQuantity * 2 ) > this.rendering.pagination.availablePages )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsideQuantity = Math.ceil( this.rendering.pagination.availablePages / 2 );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// If at the beginning of the page last.\r\n\t\t\t\t\tif ( this.rendering.pagination.currentPage <= sideQuantity )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor ( let i = 1; i <= sideQuantity; i++ )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tleftPages.push( i );\r\n\t\t\t\t\t\t\trightPages.push( i + sideQuantity );\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// If the available pages is a odd number, remove the last rightPage option (extra).\r\n\t\t\t\t\t\tif ( this.rendering.pagination.availablePages % 2 !== 0 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trightPages.pop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// If at the end of the page last.\r\n\t\t\t\t\t\tif ( this.rendering.pagination.currentPage >= ( this.rendering.pagination.availablePages - sideQuantity ) )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet tempTotalPages = this.rendering.pagination.availablePages;\r\n\r\n\t\t\t\t\t\t\t// Correction for condition when there are not enough pages to balance on left and right.\r\n\t\t\t\t\t\t\t// This will ensure the left side gets filled first.\r\n\t\t\t\t\t\t\tlet rightSideQuantity = tempTotalPages - sideQuantity;\r\n\r\n\t\t\t\t\t\t\tif ( rightSideQuantity > sideQuantity )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\trightSideQuantity = sideQuantity;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tfor ( let i = 1; i <= rightSideQuantity; i++ )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\trightPages.push( tempTotalPages );\r\n\r\n\t\t\t\t\t\t\t\ttempTotalPages--;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tfor ( let i = 1; ( i <= sideQuantity && tempTotalPages !== 0 ); i++ )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tleftPages.push( tempTotalPages );\r\n\r\n\t\t\t\t\t\t\t\ttempTotalPages--;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Reverse the sort order.\r\n\t\t\t\t\t\t\tleftPages.reverse();\r\n\t\t\t\t\t\t\trightPages.reverse();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet tempCurrentPage = this.rendering.pagination.currentPage;\r\n\r\n\t\t\t\t\t\t\t// Set left side.\r\n\t\t\t\t\t\t\tfor ( let i = 1; i <= sideQuantity; i++ )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tleftPages.push( tempCurrentPage );\r\n\r\n\t\t\t\t\t\t\t\ttempCurrentPage--;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\ttempCurrentPage = this.rendering.pagination.currentPage + 1;\r\n\r\n\t\t\t\t\t\t\t// Set right side.\r\n\t\t\t\t\t\t\tfor ( let i = 1; i <= sideQuantity; i++ )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\trightPages.push( tempCurrentPage );\r\n\r\n\t\t\t\t\t\t\t\ttempCurrentPage++;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// Reverse the sort order.\r\n\t\t\t\t\t\t\tleftPages.reverse();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.rendering.pagination.leftPages             = leftPages;\r\n\t\t\t\t\tthis.rendering.pagination.rightPages            = rightPages;\r\n\t\t\t\t\tthis.rendering.pagination.currentPageHightlight = this.rendering.pagination.currentPage;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tSET_AVAILABLE_PAGES();\r\n\t\t\t\tSET_PAGE_OPTIONS();\r\n\r\n\t\t\t\t// Reset the scroll position.\r\n\t\t\t\tthis.resetScroll();\r\n\r\n\t\t\t\t// Update the table view.\r\n\t\t\t\tthis.currentTableData = GET_ROWS_IN_PAGE();\r\n\t\t\t},\r\n\r\n\t\t\t// Changes the page to the passed value.\r\n\t\t\tpaginationChange : function ( page )\r\n\t\t\t{\r\n\t\t\t\tif ( this.rendering.pagination.currentPage !== page )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'PaginationGoToSpecificPage';\r\n\r\n\t\t\t\t\t// Increase the page.\r\n\t\t\t\t\tthis.rendering.pagination.currentPage = page;\r\n\r\n\t\t\t\t\t// Emit pagination event.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Update the view.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Re-render the view.\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Checks and processes the next page of paginated data.\r\n\t\t\tpaginationNext : function ()\r\n\t\t\t{\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'PaginationGoToNextPage';\r\n\r\n\t\t\t\tlet nextPage = this.rendering.pagination.currentPage + 1;\r\n\r\n\t\t\t\t// Ensure not going beyond available pages.\r\n\t\t\t\tif ( nextPage <= this.rendering.pagination.availablePages )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Increase the page.\r\n\t\t\t\t\tthis.rendering.pagination.currentPage++;\r\n\r\n\t\t\t\t\t// Emit pagination event.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Update the view.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Re-render the view.\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Changes to the last page (end of dataset).\r\n\t\t\tpaginationLast : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.rendering.pagination.currentPage !== this.rendering.pagination.availablePages )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'PaginationGoToLastPage';\r\n\r\n\t\t\t\t\t// Set the current page to the last.\r\n\t\t\t\t\tthis.rendering.pagination.currentPage = this.rendering.pagination.availablePages;\r\n\r\n\t\t\t\t\t// Emit pagination event.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Update the view.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Re-render the view.\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Checks and processes the previous page of paginated data.\r\n\t\t\tpaginationPrevious : function ()\r\n\t\t\t{\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'PaginationGoToPreviousPage';\r\n\r\n\t\t\t\tlet previousPage = this.rendering.pagination.currentPage - 1;\r\n\r\n\t\t\t\t// Ensure not going beyond available pages.\r\n\t\t\t\tif ( previousPage >= 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Increase the page.\r\n\t\t\t\t\tthis.rendering.pagination.currentPage--;\r\n\r\n\t\t\t\t\t// Emit pagination event.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Update the view.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Re-render the view.\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Changes to the first page (beginning of dataset).\r\n\t\t\tpaginationFirst : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.rendering.pagination.currentPage !== 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'PaginationGoToFirstPage';\r\n\r\n\t\t\t\t\t// Set the current page to the last.\r\n\t\t\t\t\tthis.rendering.pagination.currentPage = 1;\r\n\r\n\t\t\t\t\t// Emit pagination event.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Update the view.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Re-render the view.\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Changes how many rows can appear per page.\r\n\t\t\tchangePageRows : function ( rows )\r\n\t\t\t{\r\n\t\t\t\tif ( this.rendering.pagination.currentSelectedPageRowOption !== rows )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'PaginationPageLimitChange';\r\n\r\n\t\t\t\t\tif ( rows === 'All' )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.rendering.pagination.currentPageRows = this.processedDataSize;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.rendering.pagination.currentPageRows = rows;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.rendering.pagination.currentSelectedPageRowOption = rows;\r\n\r\n\t\t\t\t\tthis.rendering.pagination.currentPage           = 1;\r\n\t\t\t\t\tthis.rendering.pagination.currentPageHightlight = null;\r\n\t\t\t\t\tthis.rendering.pagination.currentStartIndex     = null;\r\n\t\t\t\t\tthis.rendering.pagination.currentEndIndex       = null;\r\n\t\t\t\t\tthis.rendering.pagination.availablePages        = null;\r\n\t\t\t\t\tthis.rendering.pagination.changingRows          = false;\r\n\t\t\t\t\tthis.rendering.pagination.leftPages             = [];\r\n\t\t\t\t\tthis.rendering.pagination.rightPages            = [];\r\n\t\t\t\t\tthis.rendering.external.dataSize                = null;\r\n\r\n\t\t\t\t\t// Emit pagination event.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Update the view.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Changes the current view (Shows/hides a grouping of columns).\r\n\t\t\tchangeViews : function ( view )\r\n\t\t\t{\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'ChangeView';\r\n\r\n\t\t\t\tif ( view )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.rendering.views.currentSelectedView !== view.viewName )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Update the status.\r\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\r\n\t\t\t\t\t\t// Update the current view.\r\n\t\t\t\t\t\tthis.rendering.views.currentSelectedView = view.viewName;\r\n\t\t\t\t\t\tthis.rendering.views.currentView         = view;\r\n\r\n\t\t\t\t\t\t// Update the visibility on all columns based on the view.\r\n\t\t\t\t\t\tthis.columns.list.forEach ( ( column ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlet matchedColumn = this.rendering.views.currentView.schema.find( ( viewColumn ) =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn column.name === viewColumn.name;\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tif ( matchedColumn )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcolumn.enabled = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcolumn.enabled = false\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tlet hasBeenSorted = false;\r\n\r\n\t\t\t\t\t\t// Update the sort.\r\n\t\t\t\t\t\tthis.rendering.views.currentView.schema.forEach( ( viewColumn, viewIndex ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif ( viewColumn.sort )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.columns.activeSortIndex    = viewIndex;\r\n\t\t\t\t\t\t\t\tthis.columns.activeSortName     = viewColumn.name;\r\n\t\t\t\t\t\t\t\tthis.columns.activeSortSpecial  = viewColumn.sortSpecial;\r\n\t\t\t\t\t\t\t\thasBeenSorted                   = true;\r\n\r\n\t\t\t\t\t\t\t\tif ( typeof( viewColumn.sortDirection ) === 'string' )\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = false;\r\n\r\n\t\t\t\t\t\t\t\t\tif ( viewColumn.sortDirection === 'asc' )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tif ( !hasBeenSorted )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.columns.activeSortIndex   = 0;\r\n\t\t\t\t\t\t\tthis.columns.activeSortAsc     = true\r\n\t\t\t\t\t\t\tthis.columns.activeSortName    = this.rendering.views.currentView.schema[0].name;\r\n\t\t\t\t\t\t\tthis.columns.activeSortSpecial = this.rendering.views.currentView.schema[0].sortSpecial;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Re-render the view.\r\n\t\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.rendering.views.changingViews = false;\r\n\r\n\t\t\t\tthis.emitState();\r\n\t\t\t},\r\n\r\n\t\t\t// Virtual Engine: Sets the next top and bottom re-rendering position points in pixels.\r\n\t\t\tsetRenderPositions : function ()\r\n\t\t\t{\r\n\t\t\t\t// For a re-render.\r\n\t\t\t\tthis.$forceUpdate();\r\n\r\n\t\t\t\t// We use nextTick() so that the height calculations are performed after the render is complete.\r\n\t\t\t\tthis.$nextTick( () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Returns the height of the current rendered view (all items).\r\n\t\t\t\t\tconst CURRENT_VIEW_HEIGHT = () =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn this.$refs.viewData.clientHeight;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Returns the current position (top) of the view inside the body.\r\n\t\t\t\t\tconst CURRENT_VIEW_POSITION_PX = () =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn this.$refs.viewData.offsetTop;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Returns the current height of the table body.\r\n\t\t\t\t\tconst CURRENT_BODY_HEIGHT = () =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn this.$refs.bodyData.clientHeight;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Calculate the next render (top) position.\r\n\t\t\t\t\tif ( this.rendering.virtual.rowTopIndex === 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.rendering.virtual.triggerTopPositionPX = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Re-render when the scroll bar is at a position where only 5 rows exist above.\r\n\t\t\t\t\t\tthis.rendering.virtual.triggerTopPositionPX = Math.floor( CURRENT_VIEW_POSITION_PX() + ( CURRENT_VIEW_HEIGHT() / 8 ) );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Calculate the next render (bottom) position.\r\n\t\t\t\t\tif ( this.rendering.virtual.rowBottomIndex === ( this.processedDataSize - 1 ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.rendering.virtual.triggerBottomPositionPX = -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Re-render when scroll bar is at a position where only 2 pages of rows exist.\r\n\t\t\t\t\t\tthis.rendering.virtual.triggerBottomPositionPX = Math.floor ( ( CURRENT_VIEW_POSITION_PX() + CURRENT_VIEW_HEIGHT() ) - ( CURRENT_BODY_HEIGHT() * 2.0 ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t// Used for virtual rendering, renders the view when scrolling at top/bottom trigger points.\r\n\t\t\tvirtualScroll : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.rendering.engine !== 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( !this.rendering.resettingScroll )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Clear the scrolling timer.\r\n\t\t\t\t\tclearTimeout( this.rendering.isScrolling );\r\n\r\n\t\t\t\t\t// Get the current scroll position.\r\n\t\t\t\t\tlet scrollPositionPX = this.$refs.bodyData.scrollTop;\r\n\r\n\t\t\t\t\t// Calculate the % (0 - 100) the scroll position is.\r\n\t\t\t\t\tlet scrollPositionPercent = scrollPositionPX / this.rendering.virtual.height;\r\n\r\n\t\t\t\t\t// Calculate the next potential render position in the data.\r\n\t\t\t\t\tlet potentialRenderPosition = Math.floor( this.processedDataSize * scrollPositionPercent );\r\n\r\n\t\t\t\t\t// Scrolling Up Check\r\n\t\t\t\t\tif ( scrollPositionPX < this.rendering.virtual.triggerTopPositionPX )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.rendering.virtual.triggerTopPositionPX >= 0 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Show the processing message.\r\n\t\t\t\t\t\t\tthis.updateStatus( 'processingData', true );\r\n\r\n\t\t\t\t\t\t\tthis.rendering.isScrolling = setTimeout( () =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.renderView( Math.floor( this.processedDataSize * scrollPositionPercent ) );\r\n\t\t\t\t\t\t\t}, 500 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Scrolling Down Check.\r\n\t\t\t\t\tif ( scrollPositionPX > this.rendering.virtual.triggerBottomPositionPX )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.rendering.virtual.triggerBottomPositionPX >= 0 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Show the processing message.\r\n\t\t\t\t\t\t\tthis.updateStatus( 'processingData', true );\r\n\r\n\t\t\t\t\t\t\tthis.rendering.isScrolling = setTimeout( () =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.renderView( Math.floor( this.processedDataSize * scrollPositionPercent ) );\r\n\t\t\t\t\t\t\t}, 750 );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Checks the width of the JD-Table and sets the mobile size flag.\r\n\t\t\tcheckMobile : function ()\r\n\t\t\t{\r\n\t\t\t\tsetTimeout( () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.status.mobileSize = false;\r\n\r\n\t\t\t\t\tif ( this.$refs.bodyData.clientWidth <= 320)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.status.mobileSize = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 220);\r\n\t\t\t},\r\n\r\n\t\t\t// Sets the row index that is currently being hovered over.\r\n\t\t\trowHover : function ( rowIndex, e )\r\n\t\t\t{\r\n\t\t\t\tthis.row.activeHoverIndex   = rowIndex;\r\n\t\t\t\tthis.row.activeHoverElement = e.srcElement.closest('.jd-row');\r\n\t\t\t},\r\n\r\n\t\t\t// Sets the column that is currently being hovered over.\r\n\t\t\tcellHover : function ( columnIndex )\r\n\t\t\t{\r\n\t\t\t\tthis.columns.activeHoverIndex = columnIndex;\r\n\t\t\t},\r\n\r\n\t\t\t// Checks if the body of the table has a scroll bar. This is important to align the head + body.\r\n\t\t\tcheckBodyScroll : function ()\r\n\t\t\t{\r\n\t\t\t\tsetTimeout( () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.status.tableScroll = false;\r\n\r\n\t\t\t\t\t// Checks the table widths to see if scroll bar is enabled for body.\r\n\t\t\t\t\tif ( this.$refs.bodyData.scrollHeight > this.$refs.bodyData.clientHeight )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.status.tableScroll = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 100);\r\n\t\t\t},\r\n\r\n\t\t\t// Resets clears the current hovered column/row data.\r\n\t\t\tbodyLeave : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.rendering.engine !== 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.columns.activeHoverIndex = null;\r\n\t\t\t},\r\n\r\n\t\t\t// Triggers the start of a resize event. Records the column to be resized and the starting X position.\r\n\t\t\tresizeStart : function ( columnIndex, e )\r\n\t\t\t{\r\n\t\t\t\t// Start a listener to stop the resize process.\r\n\t\t\t\twindow.addEventListener( 'mouseup', this.resizeStop , false );\r\n\r\n\t\t\t\tif ( !this.setting.responsiveTable )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.columns.activeResize      = columnIndex;\r\n\t\t\t\t\tthis.columns.activeResizeStart = e.clientX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t// Ends the column resize process.\r\n\t\t\tresizeStop : function ()\r\n\t\t\t{\r\n\t\t\t\t// Small delay to help with sort issue.\r\n\t\t\t\tsetTimeout( () =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.columns.activeResize = null;\r\n\t\t\t\t}, 75 );\r\n\r\n\t\t\t\t// Virtual Engine\r\n\t\t\t\tif ( this.setting.rendering === 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.renderViewVirtual( this.rendering.virtual.rowMiddleIndex );\r\n\t\t\t\t}\r\n\r\n\t\t\t\twindow.removeEventListener( 'mouseup', this.resizeStop, false );\r\n\t\t\t},\r\n\r\n\t\t\t// Resets the scroll position to the top left of the table body.\r\n\t\t\tresetScroll : function ()\r\n\t\t\t{\r\n\t\t\t\t// Reset the render positions.\r\n\t\t\t\tthis.rendering.virtual.triggerTopPositionPX    = null;\r\n\t\t\t\tthis.rendering.virtual.triggerBottomPositionPX = null;\r\n\r\n\t\t\t\t// This prevents the triggering of the onScroll function for body.\r\n\t\t\t\tthis.rendering.resettingScroll = true;\r\n\r\n\t\t\t\t// Reset the scroll position to top/left.\r\n\t\t\t\tthis.$refs.bodyData.scrollTop      = 0;\r\n\t\t\t\tthis.$refs.contentFrame.scrollLeft = 0;\r\n\r\n\t\t\t\tthis.$nextTick().then( () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// This prevents the triggering of the onScroll function for body.\r\n\t\t\t\t\tthis.rendering.resettingScroll = false;\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t// Resizes the flagged column according to the clientX position.\r\n\t\t\tresizeDrag : function ( columnIndex, e )\r\n\t\t\t{\r\n\t\t\t\tif ( !this.setting.responsiveTable && this.columns.activeResize !== null )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Extract the width number from the string.\r\n\t\t\t\t\tlet width = this.rendering.views.currentView.schema[columnIndex].width;\r\n\r\n\t\t\t\t\t// Shrink the width.\r\n\t\t\t\t\tif ( e.clientX < this.columns.activeResizeStart )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calculate new width based off the existing width and start drag position and current client X.\r\n\t\t\t\t\t\twidth = width - ( this.columns.activeResizeStart - e.clientX );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Expand the width.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Calculate new width based off the existing width and start drag position and current client X.\r\n\t\t\t\t\t\twidth = width + ( e.clientX - this.columns.activeResizeStart );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// If resizeForceMinWidth is enabled and the width is lower then start - reset width.\r\n\t\t\t\t\tif ( this.setting.resizeForceMinWidth && ( width < this.rendering.views.currentView.schema[columnIndex].originalWidth ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twidth = this.setting.columns[columnIndex].width;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Update the column width.\r\n\t\t\t\t\tthis.rendering.views.currentView.schema[columnIndex].width                   = width;\r\n\t\t\t\t\tthis.rendering.views.currentView.schema[columnIndex].headerStyles['width']   = width + 'px';\r\n\t\t\t\t\tthis.rendering.views.currentView.schema[columnIndex].dataStyles['width']     = width + 'px';\r\n\t\t\t\t\tthis.rendering.views.currentView.schema[columnIndex].dataStyles['min-width'] = width + 'px';\r\n\r\n\t\t\t\t\t// Update the initial drag position.\r\n\t\t\t\t\tthis.columns.activeResizeStart = e.clientX;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Changes the sort column and/or direction.\r\n\t\t\tchangeSort : function ( columnIndex, columnName, sortSpecial )\r\n\t\t\t{\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'ChangeSort';\r\n\r\n\t\t\t\t// Prevent sort on resize.\r\n\t\t\t\tif ( this.columns.activeResize !== null )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( !this.setting.columnSort )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the clicked column is the currently sorted column, reverse the sort.\r\n\t\t\t\tif ( this.columns.activeSortIndex === columnIndex )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.columns.activeSortAsc = !this.columns.activeSortAsc;\r\n\t\t\t\t}\r\n\t\t\t\t// Sort the new column ascending.\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.columns.activeSortIndex   = columnIndex;\r\n\t\t\t\t\tthis.columns.activeSortName    = columnName;\r\n\t\t\t\t\tthis.columns.activeSortAsc     = true;\r\n\t\t\t\t\tthis.columns.activeSortSpecial = sortSpecial;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// Re-render the view.\r\n\t\t\t\t\tthis.renderView();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.emitState();\r\n\t\t\t},\r\n\r\n\t\t\t// Sorts the original data.\r\n\t\t\tsortData : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.setting.dataProvider === 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet columnName        = this.rendering.views.currentView.schema[this.columns.activeSortIndex].name;\r\n\t\t\t\t\tlet columnSortType    = this.rendering.views.currentView.schema[this.columns.activeSortIndex].type;\r\n\t\t\t\t\tlet columnSortSpecial = this.rendering.views.currentView.schema[this.columns.activeSortIndex].sortSpecial;\r\n\r\n\t\t\t\t\tif ( this.processedDataSize > 0 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.processedData.sort( ( a, b ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Sort the data with null values.\r\n\t\t\t\t\t\t\tconst sortByNull = ( x, y ) =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif ( columnSortType === 'Array' )\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif ( !x[columnName] || !x[columnName][0] )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ( !y[columnName] || !y[columnName][0] )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif ( !x[columnName] )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ( !y[columnName] )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t// Sort the data by string.\r\n\t\t\t\t\t\t\tconst sortByString = ( x, y ) =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Special Sorting\r\n\t\t\t\t\t\t\t\tif ( columnSortSpecial )\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// IP\r\n\t\t\t\t\t\t\t\t\tif ( columnSortSpecial.toLowerCase() === 'ip' )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tx = x[columnName].split( '.' );\r\n\t\t\t\t\t\t\t\t\t\ty = y[columnName].split( '.' );\r\n\r\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0; i < x.length; i++ )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tif ( ( x[i] = parseInt( x[i] ) ) < ( y[i] = parseInt( y[i] ) ) )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse if ( x[i] > y[i] )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Normal String Sort\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tx = x[columnName].toUpperCase();\r\n\t\t\t\t\t\t\t\t\ty = y[columnName].toUpperCase();\r\n\r\n\t\t\t\t\t\t\t\t\tif ( x < y )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ( x > y )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Strings are the same.\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t// Sort the data by number.\r\n\t\t\t\t\t\t\tconst sortByNumber = ( x, y ) =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn ( x[columnName] - y[columnName] ) * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t// Sort the data by array. Sorts the first string in the array.\r\n\t\t\t\t\t\t\tconst sortByArray = ( x, y ) =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Special IP Sort\r\n\t\t\t\t\t\t\t\tif ( columnSortSpecial )\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// IP\r\n\t\t\t\t\t\t\t\t\tif ( columnSortSpecial.toLowerCase() === 'ip' )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tx = x[columnName][0].split( '.' );\r\n\t\t\t\t\t\t\t\t\t\ty = y[columnName][0].split( '.' );\r\n\r\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0; i < x.length; i++ )\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tif ( ( x[i] = parseInt( x[i] ) ) < ( y[i] = parseInt( y[i] ) ) )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\telse if ( x[i] > y[i] )\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t// Normal String Sort\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tx = x[columnName][0].toUpperCase();\r\n\t\t\t\t\t\t\t\t\ty = y[columnName][0].toUpperCase();\r\n\r\n\t\t\t\t\t\t\t\t\tif ( x < y )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? 1 : -1 );\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tif ( x > y )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\treturn ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Strings are the same.\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t// Check for nulls.\r\n\t\t\t\t\t\t\tif ( columnSortType === 'Array' )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif ( !a[columnName] || !a[columnName][0] || !b[columnName] || !b[columnName][0] )\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn sortByNull ( a, b );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif ( !a[columnName] || !b[columnName] )\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn sortByNull ( a, b );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// If the column is a string, sort using string function.\r\n\t\t\t\t\t\t\tif ( columnSortType === 'String' )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn sortByString ( a, b );\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// If the column is a Number, sort using Number function.\r\n\t\t\t\t\t\t\tif ( columnSortType === 'Number' )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn sortByNumber ( a, b );\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// If the column is a Array, sort using Array function.\r\n\t\t\t\t\t\t\tif ( columnSortType === 'Array' )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn sortByArray ( a, b );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the appropriate sort title.\r\n\t\t\tsortTitle : function ( columnIndex )\r\n\t\t\t{\r\n\t\t\t\tif ( !this.setting.columnSort )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.columns.activeSortIndex === columnIndex && !this.columns.activeSortAsc )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'Sort Ascending'\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 'Sort Descending';\r\n\t\t\t},\r\n\r\n\t\t\t// Changes the selected filter dropdown focus.\r\n\t\t\tfilterDropdown : function ( columnIndex )\r\n\t\t\t{\r\n\t\t\t\tif ( this.filters.activeDropdown === columnIndex )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Clear the selected filter dropdown.\r\n\t\t\t\t\tthis.filters.activeDropdown = null;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// Create a mouse event listener to close the dropdown.\r\n\t\t\t\t\twindow.addEventListener( 'mouseup', this.clearFilterDropdown, false );\r\n\r\n\t\t\t\t\t// Show the dropdown menu.\r\n\t\t\t\t\tif ( this.filters.beingBuilt.column === null )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.filters.activeDropdown = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.filters.activeDropdown = columnIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Clears the dropdown as well as the window listener.\r\n\t\t\tclearFilterDropdown : function ()\r\n\t\t\t{\r\n\t\t\t\t// Clear the selected filter dropdown.\r\n\t\t\t\tthis.filters.activeDropdown = null;\r\n\r\n\t\t\t\t// Remove the listener.\r\n\t\t\t\twindow.removeEventListener( 'mouseup', this.clearFilterDropdown, false );\r\n\t\t\t},\r\n\r\n\t\t\t// Helps build a filter to be applied to the table. Executed when filter dropdown item is clicked.\r\n\t\t\tbuildFilter : function ( itemIndex, item )\r\n\t\t\t{\r\n\t\t\t\t// Reset any error that may exist.\r\n\t\t\t\tthis.filters.error     = false;\r\n\t\t\t\tthis.filters.errorText = '';\r\n\r\n\t\t\t\t// Column selection.\r\n\t\t\t\tif ( itemIndex === 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.filters.beingBuilt.column = this.filterableColumns[item];\r\n\r\n\t\t\t\t\tif ( this.filters.beingBuilt.option === null )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsetTimeout( () =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Activate the next tab.\r\n\t\t\t\t\t\t\tthis.filters.activeDropdown = 1;\r\n\r\n\t\t\t\t\t\t\t// Create a mouse event listener to close the dropdown.\r\n\t\t\t\t\t\t\twindow.addEventListener( 'mouseup', this.clearFilterDropdown, false );\r\n\t\t\t\t\t\t}, 50);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Option selection.\r\n\t\t\t\tif ( itemIndex === 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.filters.beingBuilt.option = item;\r\n\r\n\t\t\t\t\tif ( this.filters.beingBuilt.value === null )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.$refs.filterInput.focus();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Adds the built filter to be applied to the table.\r\n\t\t\taddFilter : function ()\r\n\t\t\t{\r\n\t\t\t\t// Manage Data Availability.\r\n\t\t\t\tif ( this.setting.dataProvider === 0 && this.data.length === 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.filters.errorText = 'There is no data available to filter.';\r\n\t\t\t\t\tthis.filters.error = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Manage column error.\r\n\t\t\t\tif ( this.filters.beingBuilt.column === null || typeof( this.filters.beingBuilt.column ) !== 'object' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.filters.errorText = 'A column must be selected to add a filter.';\r\n\t\t\t\t\tthis.filters.error = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Manage option error.\r\n\t\t\t\tif ( this.filters.beingBuilt.option === null || typeof( this.filters.beingBuilt.option ) !== 'string' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.filters.errorText = 'A filter type must be selected to add a filter.';\r\n\t\t\t\t\tthis.filters.error = true;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.filters.beingBuilt.option === 'Greater/Equal To' && isNaN( this.filters.beingBuilt.value ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.filters.errorText = 'Value must be a number.';\r\n\t\t\t\t\t\tthis.filters.error = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.filters.beingBuilt.option === 'Less/Equal To' && isNaN( this.filters.beingBuilt.value ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.filters.errorText = 'Value must be a number.';\r\n\t\t\t\t\t\tthis.filters.error = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Manage value error.\r\n\t\t\t\tif ( this.filters.beingBuilt.value === null || typeof( this.filters.beingBuilt.value ) !== 'string' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.filters.errorText = 'A filter value must be entered to add a filter.';\r\n\t\t\t\t\tthis.filters.error = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If there are no errors, continue.\r\n\t\t\t\tif ( !this.filters.error )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'AddFilter';\r\n\r\n\t\t\t\t\t// Create a copy of the filter.\r\n\t\t\t\t\tlet filter =\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcolumn : this.filters.beingBuilt.column,\r\n\t\t\t\t\t\t\toption : this.filters.beingBuilt.option,\r\n\t\t\t\t\t\t\tvalue  : this.filters.beingBuilt.value\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Add the filter.\r\n\t\t\t\t\tthis.filters.active.push( filter );\r\n\r\n\t\t\t\t\t// Clear being built.\r\n\t\t\t\t\tthis.filters.beingBuilt.column = null;\r\n\t\t\t\t\tthis.filters.beingBuilt.option = null;\r\n\t\t\t\t\tthis.filters.beingBuilt.value  = null;\r\n\r\n\t\t\t\t\t// Reset the scroll position to top/left.\r\n\t\t\t\t\tthis.resetScroll();\r\n\r\n\t\t\t\t\t// dataProvider = 1 | Filtering is performed externally (emitted).\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// dataProvider = 0 | Filtering is performed on the data that exists in the JD-Table component.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.resetScroll();\r\n\r\n\t\t\t\t\t\t// Process the data through filters/search.\r\n\t\t\t\t\t\tthis.processData().then( () =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Render the new view.\r\n\t\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Removes a filter from the active list.\r\n\t\t\tremoveFilter : function ( index )\r\n\t\t\t{\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'RemoveFilter';\r\n\r\n\t\t\t\t// Reset any error that may exist.\r\n\t\t\t\tthis.filters.error     = false;\r\n\t\t\t\tthis.filters.errorText = '';\r\n\r\n\t\t\t\tthis.filters.active.splice( index, 1 );\r\n\r\n\t\t\t\t// dataProvider = 1 | Filtering is performed externally (emitted).\r\n\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t}\r\n\t\t\t\t// dataProvider = 0 | Filtering is performed on the data that exists in the JD-Table component.\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.resetScroll();\r\n\r\n\t\t\t\t\t// Process the data through filters/search.\r\n\t\t\t\t\tthis.processData().then( () =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Render the new view.\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.emitState();\r\n\t\t\t},\r\n\r\n\t\t\t// Clears all active filters and being built.\r\n\t\t\tclearAllFilters : function ()\r\n\t\t\t{\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'ClearFilter';\r\n\r\n\t\t\t\t// Clear being built.\r\n\t\t\t\tthis.filters.beingBuilt.column = null;\r\n\t\t\t\tthis.filters.beingBuilt.option = null;\r\n\t\t\t\tthis.filters.beingBuilt.value  = null;\r\n\r\n\t\t\t\t// Reset any error that may exist.\r\n\t\t\t\tthis.filters.error     = false;\r\n\t\t\t\tthis.filters.errorText = '';\r\n\r\n\t\t\t\t// Clear active.\r\n\t\t\t\tthis.filters.active = [];\r\n\r\n\t\t\t\t// dataProvider = 1 | Filtering is performed externally (emitted).\r\n\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t}\r\n\t\t\t\t// dataProvider = 0 | Filtering is performed on the data that exists in the JD-Table component.\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// Process the data through filters/search.\r\n\t\t\t\t\tthis.processData().then( () =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Render the new view.\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.emitState();\r\n\t\t\t},\r\n\r\n\t\t\t// Changes the column visibility. Adds/removes column from view.\r\n\t\t\tcolumnSelection : function ( selectedColumn )\r\n\t\t\t{\r\n\t\t\t\t// If disabling, enforce at least 1 enabled.\r\n\t\t\t\tif ( selectedColumn.enabled )\r\n\t\t\t\t{\r\n\t\t\t\t\tlet enabledCount = 0;\r\n\r\n\t\t\t\t\t// Check how many are enabled.\r\n\t\t\t\t\tthis.rendering.views.currentView.schema.forEach( ( column ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( column.enabled )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tenabledCount++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Must have at least 1 enabled to disable.\r\n\t\t\t\t\tif ( enabledCount > 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Spice column out of currentView.\r\n\t\t\t\t\t\tlet columnToSplice = this.rendering.views.currentView.schema.findIndex( ( viewColumn ) =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn selectedColumn.name === viewColumn.name;\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Update column.\r\n\t\t\t\t\t\tselectedColumn.enabled      = false;\r\n\t\t\t\t\t\tthis.columns.selectionError = false;\r\n\r\n\t\t\t\t\t\t// Remove from array.\r\n\t\t\t\t\t\tthis.rendering.views.currentView.schema.splice( columnToSplice, 1 );\r\n\r\n\t\t\t\t\t\t// Check mobile size.\r\n\t\t\t\t\t\tthis.checkMobile();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.columns.selectionError = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.columns.selectionError = false;\r\n\t\t\t\t\tselectedColumn.enabled      = true;\r\n\r\n\t\t\t\t\t// Add to array. The view isn't sorted, its just added to the end.\r\n\t\t\t\t\tthis.rendering.views.currentView.schema.push( selectedColumn );\r\n\r\n\t\t\t\t\t// Check mobile size.\r\n\t\t\t\t\tthis.checkMobile();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Performs the search action.\r\n\t\t\tperformSearch : function ()\r\n\t\t\t{\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'ApplySearch';\r\n\r\n\t\t\t\tif ( !this.search.text )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.search.searching )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.clearSearch();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// Emit search event.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'searching', true );\r\n\r\n\t\t\t\t\t\tthis.search.searching = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Perform search using JD-Table.\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.data.length > 0 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.updateStatus( 'searching', true );\r\n\r\n\t\t\t\t\t\t\tthis.resetScroll();\r\n\r\n\t\t\t\t\t\t\tthis.processData().then( () =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.updateStatus( 'searching', false );\r\n\r\n\t\t\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.emitState();\r\n\t\t\t},\r\n\r\n\t\t\t// Clears the search.\r\n\t\t\tclearSearch : function ()\r\n\t\t\t{\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'ClearSearch';\r\n\r\n\t\t\t\t// Clear search data.\r\n\t\t\t\tthis.search.text       = '';\r\n\t\t\t\tthis.search.searching  = false;\r\n\r\n\t\t\t\tthis.resetScroll();\r\n\r\n\t\t\t\tthis.processData().then( () =>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Emit search event.\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.updateStatus( 'updatingPage', true );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.renderView();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.emitState();\r\n\t\t\t\t});\r\n\t\t\t},\r\n\r\n\t\t\t// Called when user selects the \"Quick View\" option from the left/right click context menu of a row.\r\n\t\t\tcontextQuickView : function ()\r\n\t\t\t{\r\n\t\t\t\t// Reset any visible feature options.\r\n\t\t\t\tthis.featureAction( null );\r\n\r\n\t\t\t\t// Show the quick view.\r\n\t\t\t\tthis.row.selectedIndex = this.row.activeContextIndex;\r\n\t\t\t},\r\n\r\n\t\t\t// Called when user selects the \"View\" option from the left/right click context menu of a row.\r\n\t\t\tcontextView : function ( newWindow )\r\n\t\t\t{\r\n\t\t\t\t// Reset any visible feature options.\r\n\t\t\t\tthis.featureAction( null );\r\n\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'ViewItem';\r\n\r\n\t\t\t\tif ( newWindow )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'ViewItemNewWindow';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.emitState();\r\n\t\t\t},\r\n\r\n\t\t\t// Called when user selects the \"Edit\" option from the left/right click context menu of a row.\r\n\t\t\tcontextEdit : function ( newWindow )\r\n\t\t\t{\r\n\t\t\t\t// Reset any visible feature options.\r\n\t\t\t\tthis.featureAction( null );\r\n\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'EditItem';\r\n\r\n\t\t\t\tif ( newWindow )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'EditItemNewWindow';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.emitState();\r\n\t\t\t},\r\n\r\n\t\t\t// Called when user selects the \"Delete\" option from the left/right click context menu of a row.\r\n\t\t\tcontextDelete : function ()\r\n\t\t\t{\r\n\t\t\t\t// Reset any visible feature options.\r\n\t\t\t\tthis.featureAction( null );\r\n\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'DeleteItem';\r\n\r\n\t\t\t\tthis.emitState();\r\n\t\t\t},\r\n\r\n\t\t\t// Called when user selects the \"Add\" option from the left/right click context menu of a row.\r\n\t\t\tcontextAdd : function ( newWindow )\r\n\t\t\t{\r\n\t\t\t\t// Reset any visible feature options.\r\n\t\t\t\tthis.featureAction( null );\r\n\r\n\t\t\t\t// Update the last action performed.\r\n\t\t\t\tthis.status.lastAction = 'AddItem';\r\n\r\n\t\t\t\tif ( newWindow )\r\n\t\t\t\t{\r\n\t\t\t\t\t// Update the last action performed.\r\n\t\t\t\t\tthis.status.lastAction = 'AddItemNewWindow';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.emitState();\r\n\t\t\t},\r\n\r\n\t\t\t// Called when user single (left) clicks on a data row. Accepts the index of the data on the this.data.\r\n\t\t\trowActionSingle : function ( rowIndex )\r\n\t\t\t{\r\n\t\t\t\tif ( this.setting.quickView === 1 && !this.setting.contextMenuLeft )\r\n\t\t\t\t{\r\n\t\t\t\t\t// If the menu is visible already ..\r\n\t\t\t\t\tif ( this.status.contextMenu )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.hideContextMenu();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.featureAction( null );\r\n\r\n\t\t\t\t\t// Add a highlight to the quick view row.\r\n\t\t\t\t\tthis.row.activeContextIndex   = this.row.activeHoverIndex;\r\n\t\t\t\t\tthis.row.activeContextElement = this.row.activeHoverElement;\r\n\r\n\t\t\t\t\t// Make the row red.\r\n\t\t\t\t\tthis.row.activeContextElement.classList.add('jd-rowSelect');\r\n\r\n\t\t\t\t\t// Show the quick view.\r\n\t\t\t\t\tthis.row.selectedIndex = rowIndex;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Called when user double clicks on a data row. Accepts the index of the data on the this.data.\r\n\t\t\trowActionDouble : function ( rowIndex )\r\n\t\t\t{\r\n\t\t\t\tif ( this.setting.quickView === 2 && !this.setting.contextMenuLeft )\r\n\t\t\t\t{\r\n\t\t\t\t\t// If the menu is visible already ..\r\n\t\t\t\t\tif ( this.status.contextMenu )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.hideContextMenu();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.featureAction( null );\r\n\r\n\t\t\t\t\t// Add a highlight to the quick view row.\r\n\t\t\t\t\tthis.row.activeContextIndex   = this.row.activeHoverIndex;\r\n\t\t\t\t\tthis.row.activeContextElement = this.row.activeHoverElement;\r\n\r\n\t\t\t\t\t// Make the row red.\r\n\t\t\t\t\tthis.row.activeContextElement.classList.add('jd-rowSelect');\r\n\r\n\t\t\t\t\t// Show the quick view.\r\n\t\t\t\t\tthis.row.selectedIndex = rowIndex;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Called when the quick view window is closed.\r\n\t\t\tquickViewClose : function ()\r\n\t\t\t{\r\n\t\t\t\t// Remove the row red.\r\n\t\t\t\tthis.row.activeContextElement.classList.remove('jd-rowSelect');\r\n\r\n\t\t\t\t// Update the index of the row right clicked on.\r\n\t\t\t\tthis.row.activeContextIndex   = null;\r\n\t\t\t\tthis.row.activeContextElement = null;\r\n\r\n\t\t\t\t// Hide the quick view.\r\n\t\t\t\tthis.row.selectedIndex = null;\r\n\t\t\t},\r\n\r\n\t\t\t// Called when the NEXT button is pressed on the quick view.\r\n\t\t\tquickViewNext : function ()\r\n\t\t\t{\r\n\t\t\t\t// External\r\n\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.row.selectedIndex < ( this.processedDataSize ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.data[ this.row.selectedIndex + 1 ] != null )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.row.selectedIndex++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Check for last page\r\n\t\t\t\t\t\t\tif ( this.rendering.pagination.currentEndIndex !== this.processedDataSize )\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// Need more data (move to next page).\r\n\t\t\t\t\t\t\t\tthis.paginationNext();\r\n\r\n\t\t\t\t\t\t\t\tthis.row.selectedIndex = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Internal\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.row.selectedIndex < ( this.processedData.length - 1 ) )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.row.selectedIndex++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Called when the PREVIOUS button is pressed on the quick view.\r\n\t\t\tquickViewPrevious : function ()\r\n\t\t\t{\r\n\t\t\t\t// External\r\n\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.row.selectedIndex === 0 && this.rendering.pagination.currentPage !== 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Need more data (move to previous page).\r\n\t\t\t\t\t\tthis.paginationPrevious();\r\n\r\n\t\t\t\t\t\tthis.row.selectedIndex = this.data.length - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.row.selectedIndex >= 1 )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.row.selectedIndex--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Internal\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.row.selectedIndex >= 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.row.selectedIndex--;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Prints the element.\r\n\t\t\tprint : function ( elementRef )\r\n\t\t\t{\r\n\t\t\t\tlet contentToPrinter = this.$refs[elementRef].innerHTML;\r\n\t\t\t\tlet styles           = \"<style>.contentRow { display : flex; flex-direction : column; width : 100%; } .rowTitle { display : flex; align-items : center; font-size : 1rem; font-weight : 600; word-break : break-all; padding : 0.5rem 1rem; } .rowData { display : flex; align-items : center;padding : 0.2rem 1rem; word-break : break-all; }</style>\";\r\n\t\t\t\tlet printWindow      = window.open( '', 'Print', 'height=600, width=800');\r\n\r\n\t\t\t\tprintWindow.document.write('<html><head><title>Print</title>');\r\n\t\t\t\tprintWindow.document.write(styles);\r\n\t\t\t\tprintWindow.document.write('</head><body >');\r\n\t\t\t\tprintWindow.document.write(contentToPrinter);\r\n\t\t\t\tprintWindow.document.write('</body></html>');\r\n\r\n\t\t\t\tprintWindow.document.close();\r\n\t\t\t\tprintWindow.focus();\r\n\t\t\t\tprintWindow.print();\r\n\t\t\t\tprintWindow.close();\r\n\t\t\t},\r\n\r\n\t\t\t// Clears all data from table.\r\n\t\t\tclearTable : function ()\r\n\t\t\t{\r\n\t\t\t\t// Clear data.\r\n\t\t\t\tthis.processedData = [];\r\n\t\t\t\tthis.data          = [];\r\n\r\n\t\t\t\t// Clear Search\r\n\t\t\t\tthis.search.searching = false;\r\n\t\t\t\tthis.search.text      = \"\";\r\n\r\n\t\t\t\t// Clear Filters\r\n\t\t\t\tthis.filters.active            = [];\r\n\t\t\t\tthis.filters.activeDropdown    = null;\r\n\t\t\t\tthis.filters.beingBuilt.column = null;\r\n\t\t\t\tthis.filters.beingBuilt.option = null;\r\n\t\t\t\tthis.filters.beingBuilt.value  = null;\r\n\t\t\t\tthis.filters.error             = false;\r\n\t\t\t\tthis.filters.errorText         = \"\";\r\n\t\t\t\tthis.filters.show              = false;\r\n\r\n\t\t\t\t// Reset pagination.\r\n\t\t\t\tthis.rendering.pagination.currentPage           = 1;\r\n\t\t\t\tthis.rendering.pagination.currentPageHightlight = null;\r\n\t\t\t\tthis.rendering.pagination.currentStartIndex     = null;\r\n\t\t\t\tthis.rendering.pagination.currentEndIndex       = null;\r\n\t\t\t\tthis.rendering.pagination.availablePages        = null;\r\n\t\t\t\tthis.rendering.pagination.currentPageRows       = this.rendering.pagination.currentSelectedPageRowOption;\r\n\t\t\t\tthis.rendering.pagination.changingRows          = false;\r\n\t\t\t\tthis.rendering.pagination.leftPages             = [];\r\n\t\t\t\tthis.rendering.pagination.rightPages            = [];\r\n\r\n\t\t\t\t// Reset virtual.\r\n\t\t\t\tthis.rendering.virtual.rowBottomIndex           = 0;\r\n\t\t\t\tthis.rendering.virtual.rowTopIndex              = 0;\r\n\t\t\t\tthis.rendering.virtual.rowMiddleIndex           = 0;\r\n\t\t\t\tthis.rendering.virtual.triggerBottomPositionPX  = 0;\r\n\t\t\t\tthis.rendering.virtual.triggerTopPositionPX     = 0;\r\n\t\t\t\tthis.rendering.virtual.height                   = 0;\r\n\r\n\t\t\t\t// Reset external.\r\n\t\t\t\tthis.rendering.external.dataSize = null;\r\n\r\n\t\t\t\t// Selection\r\n\t\t\t\tthis.row.selectedIndex = null;\r\n\r\n\t\t\t\t// Stop any processing messaging.\r\n\t\t\t\tthis.updateStatus( 'processingData', false );\r\n\r\n\t\t\t\t// Reset scroll positions.\r\n\t\t\t\tthis.resetScroll();\r\n\r\n\t\t\t\t// Clean the view.\r\n\t\t\t\tthis.currentTableData = [];\r\n\t\t\t},\r\n\r\n\t\t\t// Displays the appropriate table message based on component status.\r\n\t\t\tupdateStatus : function ( statusName, state )\r\n\t\t\t{\r\n\t\t\t\tthis.status.searching      = false;\r\n\t\t\t\tthis.status.updatingPage   = false;\r\n\t\t\t\tthis.status.processingData = false;\r\n\r\n\t\t\t\tif ( statusName === 'processingData' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.status.processingData = state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( statusName === 'searching' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.status.searching = state;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( statusName === 'updatingPage' )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.status.updatingPage = state;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Convert raw number to formatted.\r\n\t\t\tformatNumberWithCommas : function ( x )\r\n\t\t\t{\r\n\t\t\t\tif ( x )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn x.toString().replace( /\\B(?=(\\d{3})+(?!\\d))/g, \",\" );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 0;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the number of rows that can fit in the current view.\r\n\t\t\tgetRowsInView : function ()\r\n\t\t\t{\r\n\t\t\t\t// Get the current height of the table body container.\r\n\t\t\t\tlet viewHeight = this.$refs.bodyData.clientHeight;\r\n\r\n\t\t\t\treturn Math.ceil( viewHeight / this.setting.rowHeight );\r\n\t\t\t},\r\n\r\n\t\t\t// Checks if the browser is a version of Internet Explorer.\r\n\t\t\tcheckBrowser : function ()\r\n\t\t\t{\r\n\t\t\t\t// Checks if browser is IE11.\r\n\t\t\t\tif ( navigator.userAgent.indexOf('MSIE')!==-1  || navigator.appVersion.indexOf('Trident/') > -1 )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.status.isIE11 = true;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.status.isIE11 = !!window.MSInputMethodContext && !!document.documentMode;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tcomputed :\r\n\t\t{\r\n\t\t\t// View flag. Enabled if the view has data. False if not.\r\n\t\t\tisViewAvailable : function ()\r\n\t\t\t{\r\n\t\t\t\treturn this.currentTableData.length > 0;\r\n\t\t\t},\r\n\r\n\t\t\t// Normalizes the initialize settings in case one or more properties are not configured.\r\n\t\t\tsetting : function ()\r\n\t\t\t{\r\n\t\t\t\treturn Object.assign (\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Data Provider\r\n\t\t\t\t\t\tdataProvider : 0,\r\n\r\n\t\t\t\t\t\t// Column Data\r\n\t\t\t\t\t\tcolumns             : [],\r\n\r\n\t\t\t\t\t\t// Features\r\n\t\t\t\t\t\tstartBySearch                : false,\r\n\t\t\t\t\t\tstartBySearchMessage         : null,\r\n\t\t\t\t\t\tstartBySearchArrowSearch     : false,\r\n\t\t\t\t\t\tstartBySearchArrowFilter     : false,\r\n\t\t\t\t\t\tstartBySearchArrowSearchText : 'Search Here',\r\n\t\t\t\t\t\tstartBySearchArrowFilterText : 'Filter by Column',\r\n\t\t\t\t\t\tmaxMinimize                  : true,\r\n\t\t\t\t\t\trefresh                      : true,\r\n\t\t\t\t\t\tsearch                       : true,\r\n\t\t\t\t\t\tcolumnSelect                 : true,\r\n\t\t\t\t\t\taddNew                       : false,\r\n\t\t\t\t\t\teditItem                     : false,\r\n\t\t\t\t\t\tviewItem                     : false,\r\n\t\t\t\t\t\tdeleteItem                   : false,\r\n\t\t\t\t\t\tresize                       : true,\r\n\t\t\t\t\t\tfilter                       : true,\r\n\t\t\t\t\t\texport                       : true,\r\n\t\t\t\t\t\texportLimit                  : null,\r\n\t\t\t\t\t\tcolumnSort                   : true,\r\n\t\t\t\t\t\tquickView\t\t\t         : 1,\r\n\t\t\t\t\t\tcontextMenuRight             : false,\r\n\t\t\t\t\t\tcontextMenuLeft              : false,\r\n\t\t\t\t\t\tcontextMenuQuickView         : true,\r\n\t\t\t\t\t\tcontextMenuView              : true,\r\n\t\t\t\t\t\tcontextMenuEdit              : true,\r\n\t\t\t\t\t\tcontextMenuDelete            : true,\r\n\t\t\t\t\t\tcontextMenuAdd               : true,\r\n\r\n\t\t\t\t\t\t// Rendering\r\n\t\t\t\t\t\trenderEngine                   : 2,\r\n\t\t\t\t\t\tresponsiveFrame                : true,\r\n\t\t\t\t\t\tresponsiveFrameForceFullWidth  : false,\r\n\t\t\t\t\t\tresponsiveTable                : true,\r\n\t\t\t\t\t\tvirtualEngineRowStart          : 250,\r\n\t\t\t\t\t\tframeWidth                     : null,\r\n\t\t\t\t\t\theaderHeight                   : 40,\r\n\t\t\t\t\t\tdataHeight                     : 400,\r\n\t\t\t\t\t\trowHeight                      : 42,\r\n\t\t\t\t\t\tpaginationRowLimits            : [50, 100, 200],\r\n\t\t\t\t\t\tpaginationRowStart             : 50,\r\n\t\t\t\t\t\tpaginationRowAll               : true,\r\n\t\t\t\t\t\tpageSideQuantity               : 5,\r\n\r\n\t\t\t\t\t\t// Search\r\n\t\t\t\t\t\tforceSearchOpen     : false,\r\n\t\t\t\t\t\tsearchPlaceHolder   : null,\r\n\r\n\t\t\t\t\t\t// Settings\r\n\t\t\t\t\t\tstartMaximized      : false,\r\n\t\t\t\t\t\tforceMaximized      : false,\r\n\t\t\t\t\t\trowZebra            : true,\r\n\t\t\t\t\t\trowFlex             : true,\r\n\t\t\t\t\t\tresizeForceMinWidth : true,\r\n\r\n\t\t\t\t\t\t//Layers\r\n\t\t\t\t\t\thighlight           : true,\r\n\t\t\t\t\t\tcontrols            : true,\r\n\t\t\t\t\t\tfooter              : true,\r\n\r\n\t\t\t\t\t\ttitle               : null,\r\n\t\t\t\t\t\tviews               : []\r\n\t\t\t\t\t}, this.option\r\n\t\t\t\t);\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the total number of rows in the data.\r\n\t\t\tprocessedDataSize : function ()\r\n\t\t\t{\r\n\t\t\t\t// Check if data is being fed from externally.\r\n\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn this.rendering.external.dataSize;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.processedData.length;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns true if there are active filters.\r\n\t\t\tfiltering : function ()\r\n\t\t\t{\r\n\t\t\t\treturn this.filters.active.length > 0;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns TRUE or FALSE based on if resize should be enabled.\r\n\t\t\tresizable : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( !this.setting.responsiveTable && this.setting.resize )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply class to JD-Table frame based on settings.\r\n\t\t\tframeClasses : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'jd-maximized';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( !this.setting.dataHeight )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'jd-fullBody';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply class to JD-Table frame based on settings.\r\n\t\t\tframeStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\tif ( !this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( !this.setting.responsiveFrame )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( this.setting.frameWidth !== null )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstyles['width']     = this.setting.frameWidth + 'px';\r\n\t\t\t\t\t\t\tstyles['min-width'] = this.setting.frameWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstyles['width'] ='100%';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Ensures the frame does get larger then the sum of all the column width's in PX.\r\n\t\t\t\t\tif ( this.setting.responsiveFrame && !this.setting.responsiveTable )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( !this.setting.responsiveFrameForceFullWidth )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply class to controlSearch based on settings.\r\n\t\t\tcontrolSearchClasses : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.feature.searching )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'jd-searching';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply class to controlFilter based on settings.\r\n\t\t\tcontrolFilterClasses : function ()\r\n\t\t\t{\r\n\t\t\t\tlet classes = '';\r\n\r\n\t\t\t\tif ( this.filters.show )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses = 'jd-selected';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.filtering )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses += ' jd-active';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn classes;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply class to search icon based on searching status.\r\n\t\t\tsearchIconClasses : function ()\r\n\t\t\t{\r\n\t\t\t\tlet classes = '';\r\n\r\n\t\t\t\tif ( this.setting.forceSearchOpen )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses += ' jd-noSelect';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.feature.searching )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses += ' jd-search jd-selected';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.search.searching )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses += ' jd-active';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( !this.feature.searching && !this.setting.forceSearchOpen )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses += ' jd-notActive'\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn classes;\r\n\t\t\t},\r\n\r\n\t\t\t// Change search icon title based on searching status.\r\n\t\t\tsearchIconTitle : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.feature.searching )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'Hide Search';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 'Show Search';\r\n\t\t\t},\r\n\r\n\t\t\t// Apply class to controlFeature based on settings.\r\n\t\t\tcontrolFeatureClasses : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.feature.searching )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'jd-searching';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply class to min/maximize icon based on min/maximize status.\r\n\t\t\tminMaxIconClasses : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'fas fa-window-minimize';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 'far fa-window-maximize';\r\n\t\t\t},\r\n\r\n\t\t\t// Change min/maximize icon title based on min/maximize status.\r\n\t\t\tminMaxIconTitle : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'Minimize';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 'Maximize';\r\n\t\t\t},\r\n\r\n\t\t\t// Apply styles to layerContent based on settings.\r\n\t\t\tlayerContentStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\tif ( !this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\t// responsiveFrame = TRUE\r\n\t\t\t\t\tif ( this.setting.responsiveFrame )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// responsiveTable = FALSE\r\n\t\t\t\t\t\tif ( !this.setting.responsiveTable )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Create scroll back in layerContent.\r\n\t\t\t\t\t\t\tstyles['overflow-y'] = 'auto';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.responsiveTable )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] ='100%';\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply styles to the content table based on settings.\r\n\t\t\ttableStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\t// responsiveTable = FALSE\r\n\t\t\t\tif ( !this.setting.responsiveTable )\r\n\t\t\t\t{\r\n\t\t\t\t\tstyles['min-width'] = this.tableWidth + 'px';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply styles to the table head based on settings.\r\n\t\t\ttableHeadStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\tstyles['height'] = this.setting.headerHeight + 'px';\r\n\t\t\t\tstyles['min-height'] = this.setting.headerHeight + 'px';\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply class to table head cells based on settings.\r\n\t\t\theadCellClasses : function ()\r\n\t\t\t{\r\n\t\t\t\tlet classes = '';\r\n\r\n\t\t\t\tif ( this.setting.columnSort )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses += ' jd-sort';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.status.tableScroll )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses += ' jd-scrollBuffer';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn classes;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply styles to the content table body based on settings.\r\n\t\t\ttableBodyStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\tif ( !this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\tstyles['height'] = this.setting.dataHeight + 'px';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply styles to the content table virtual body based on settings.\r\n\t\t\tbodyVirtualStyles : function ()\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\theight : this.rendering.virtual.height + 'px'\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t// Apply styles to feature option zone based on settings.\r\n\t\t\toptionDropdownStyles : function ()\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\t'max-height' : ( this.setting.dataHeight + this.setting.headerHeight ) + 'px'\r\n\t\t\t\t};\r\n\t\t\t},\r\n\r\n\t\t\t// Apply styles to the content table body data container based on settings.\r\n\t\t\tbodyViewStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles =\r\n\t\t\t\t{\r\n\t\t\t\t\t'width': '100%'\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif ( this.rendering.engine === 0 )\r\n\t\t\t\t{\r\n\t\t\t\t\tstyles['position'] = 'absolute';\r\n\t\t\t\t\tstyles['top']      =( this.rendering.virtual.rowTopIndex * this.setting.rowHeight ) + 'px';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply class to table body row based on settings.\r\n\t\t\tviewRowClasses : function ()\r\n\t\t\t{\r\n\t\t\t\tlet classes = '';\r\n\r\n\t\t\t\tif ( this.setting.rowZebra )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses += ' jd-zebra';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn classes;\r\n\t\t\t},\r\n\r\n\t\t\t// Apply styles to the content table body data row based on settings.\r\n\t\t\tviewRowStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\tif ( this.setting.rowFlex )\r\n\t\t\t\t{\r\n\t\t\t\t\tstyles['min-height'] = this.setting.rowHeight + 'px';\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tstyles['height'] = this.setting.rowHeight + 'px';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\trowDataClasses : function ()\r\n\t\t\t{\r\n\t\t\t\tlet classes = '';\r\n\r\n\t\t\t\tif ( this.setting.rowFlex )\r\n\t\t\t\t{\r\n\t\t\t\t\tclasses = 'jd-rowFlex';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn classes;\r\n\t\t\t},\r\n\r\n\t\t\t// Calculate the total width of the table based on the column size.\r\n\t\t\ttableWidth : function ()\r\n\t\t\t{\r\n\t\t\t\tlet totalWidth   = 0;\r\n\t\t\t\tlet missingWidth = false;\r\n\r\n\t\t\t\tthis.rendering.views.currentView.schema.forEach( ( column ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( column.enabled )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif ( column.width !== null )\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\ttotalWidth += column.width;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tmissingWidth = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// If a column width is not set, the total width cannot be determined.\r\n\t\t\t\tif ( !this.setting.responsiveTable && missingWidth )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn totalWidth;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns a list of filterable columns.\r\n\t\t\tfilterableColumns : function ()\r\n\t\t\t{\r\n\t\t\t\tlet filterableColumns = [];\r\n\r\n\t\t\t\tthis.columns.list.forEach( ( column ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( column.filterable )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfilterableColumns.push( column );\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn filterableColumns;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns a list of filter options based on the selected column.\r\n\t\t\tfilterableOptions : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.filters.beingBuilt.column === null )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn [];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.filters.beingBuilt.column.type === 'String' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ['Equals To', 'Contains', 'Not Equals To'];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn ['Equals To', 'Contains', 'Not Equals To', 'Begins With'];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.filters.beingBuilt.column.type === 'Array' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ['Contains'];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn ['Contains'];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.filters.beingBuilt.column.type === 'Number' )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.dataProvider === 1 )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ['Equals To', 'Greater/Equal To', 'Less/Equal To', 'Contains', 'Not Equals To'];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn ['Equals To', 'Greater/Equal To', 'Less/Equal To', 'Contains', 'Not Equals To', 'Begins With'];\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the text shown on the selected filter column.\r\n\t\t\tfilterColumnText : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.filters.beingBuilt.column === null )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'Select Column ..'\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.filters.beingBuilt.column.title;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the text shown on the selected filter option.\r\n\t\t\tfilterOptionText : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.filters.beingBuilt.column === null )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'Select Filter ..';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( this.filters.beingBuilt.option === null )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn 'Filter ..'\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn this.filters.beingBuilt.option;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the styles for the layerHighlight div.\r\n\t\t\tlayerHighlightStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\tif ( this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.responsiveTable )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] ='100%';\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the styles for the layerControl div.\r\n\t\t\tlayerControlStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\tif ( this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.responsiveTable )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] ='100%';\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the styles for the layerOption div.\r\n\t\t\tlayerOptionStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\tif ( this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.responsiveTable )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] ='100%';\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the styles for the layerFooter div.\r\n\t\t\tlayerFooterStyles : function ()\r\n\t\t\t{\r\n\t\t\t\tlet styles = {};\r\n\r\n\t\t\t\tif ( this.feature.maximized )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( this.setting.responsiveTable )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] ='100%';\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn styles;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the status of the Getting Started message.\r\n\t\t\tgettingStarted : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( !this.status.processingData && !this.loader && this.setting.startBySearch )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( !this.search.searching && !this.filtering )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns the status for displaying the no data message.\r\n\t\t\tnoDataMessage : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( !this.status.processingData && !this.processedDataSize && !this.loader && !this.isViewAvailable && !this.status.updatingPage && !this.status.searching && this.tableReady )\r\n\t\t\t\t{\r\n\t\t\t\t\tif ( !this.gettingStarted )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t// Returns true if any of the option menus are shown and false if none.\r\n\t\t\tmenuVisible : function ()\r\n\t\t\t{\r\n\t\t\t\tif ( this.filters.show || this.rendering.pagination.changingRows || this.columns.selecting || this.rendering.views.changingViews )\r\n\t\t\t\t{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\r\n\t\t\t// Represents the current state of data of the component. This is emitted to parent events.\r\n\t\t\tcomponentState : function ()\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsearchApplied   : this.search.searching,\r\n\t\t\t\t\tsearchText      : this.search.text,\r\n\t\t\t\t\tfilterApplied   : this.filters.active,\r\n\t\t\t\t\tpageLimit       : this.rendering.pagination.currentSelectedPageRowOption,\r\n\t\t\t\t\tcurrentPage     : this.rendering.pagination.currentPage,\r\n\t\t\t\t\tlastAction      : this.status.lastAction,\r\n\t\t\t\t\tsortColumn      : this.columns.activeSortName ? this.columns.activeSortName : this.rendering.views.currentView.schema[0].name,\r\n\t\t\t\t\tsortColumnIndex : this.columns.activeSortIndex ? this.columns.activeSortIndex : 0,\r\n\t\t\t\t\tsortDirection   : this.columns.activeSortAsc ? 'ASC' : 'DESC',\r\n\t\t\t\t\tsortSpecial     : this.columns.activeSortSpecial ? this.columns.activeSortSpecial : null,\r\n\t\t\t\t\tselectedItem    : this.row.selectedIndex !== null ? this.currentTableData[ this.row.selectedIndex ] : this.row.activeContextIndex !== null ? this.currentTableData[ this.row.activeContextIndex ] : null,\r\n\t\t\t\t\tselectedIndex   : this.row.selectedIndex !== null ? this.row.selectedIndex : this.row.activeContextIndex !== null  ? this.row.activeContextIndex : null,\r\n\t\t\t\t\tcurrentView     : this.rendering.views.currentView\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\twatch :\r\n\t\t{\r\n\t\t\t// Watches for event triggers. This will run the event when the trigger is true.\r\n\t\t\teventFromAppTrigger : function ( to , from )\r\n\t\t\t{\r\n\t\t\t\tif ( from === false && to === true && this.eventFromApp.name )\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.processEvent( this.eventFromApp.name );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n</script>\r\n\r\n<style scoped lang=\"scss\"></style>\r\n","import './assets/jd-table.scss';\r\nimport component from './jd-table.vue';\r\n\r\nexport function install( Vue )\r\n{\r\n\tif ( install.installed )\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\r\n\tinstall.installed = true;\r\n\r\n\tVue.component( 'jdtable', component );\r\n}\r\n\r\nconst plugin =\r\n{\r\n\tinstall\r\n};\r\n\r\nlet GlobalVue = null;\r\n\r\nif ( typeof window !== 'undefined' )\r\n{\r\n\tGlobalVue = window.Vue;\r\n}\r\nelse if ( typeof global !== 'undefined' )\r\n{\r\n\tGlobalVue = global.Vue;\r\n}\r\n\r\nif ( GlobalVue )\r\n{\r\n\tGlobalVue.use( plugin );\r\n}\r\n\r\ncomponent.install = install;\r\n\r\nexport default component;"],"names":["template","style","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","hook","options","render","staticRenderFns","_compiled","functional","_scopeId","context","this","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","originalRender","h","existing","beforeCreate","concat","install","Vue","installed","component","const","plugin","GlobalVue","window","global","use"],"mappings":"oMAqFA,MAnFA,SAA4BA,EAAUC,EAAOC,EAAQC,EAASC,EAAsBC,EAElFC,EAAYC,EAAgBC,EAAmBC,GACrB,kBAAfH,IACTE,EAAoBD,EACpBA,EAAiBD,EACjBA,GAAa,GAIf,IAiBII,EAjBAC,EAA4B,mBAAXT,EAAwBA,EAAOS,QAAUT,EAsD9D,GApDIF,GAAYA,EAASY,SACvBD,EAAQC,OAASZ,EAASY,OAC1BD,EAAQE,gBAAkBb,EAASa,gBACnCF,EAAQG,WAAY,EAEhBV,IACFO,EAAQI,YAAa,IAKrBZ,IACFQ,EAAQK,SAAWb,GAKjBE,GAEFK,EAAO,SAAcO,IAEnBA,EAAUA,GACVC,KAAKC,QAAUD,KAAKC,OAAOC,YAC3BF,KAAKG,QAAUH,KAAKG,OAAOF,QAAUD,KAAKG,OAAOF,OAAOC,aAGT,oBAAxBE,sBACrBL,EAAUK,qBAIRrB,GACFA,EAAMsB,KAAKL,KAAMV,EAAkBS,IAIjCA,GAAWA,EAAQO,uBACrBP,EAAQO,sBAAsBC,IAAIpB,IAMtCM,EAAQe,aAAehB,GACdT,IACTS,EAAOJ,EAAa,WAClBL,EAAMsB,KAAKL,KAAMT,EAAqBS,KAAKS,MAAMC,SAASC,cACxD,SAAUZ,GACZhB,EAAMsB,KAAKL,KAAMX,EAAeU,MAIhCP,EACF,GAAIC,EAAQI,WAAY,CAEtB,IAAIe,EAAiBnB,EAAQC,OAE7BD,EAAQC,OAAS,SAAkCmB,EAAGd,GAEpD,OADAP,EAAKa,KAAKN,GACHa,EAAeC,EAAGd,QAEtB,CAEL,IAAIe,EAAWrB,EAAQsB,aACvBtB,EAAQsB,aAAeD,EAAW,GAAGE,OAAOF,EAAUtB,GAAQ,CAACA,GAInE,OAAOR,o5rBCobT,438CCngBgBiC,EAASC,GAEnBD,EAAQE,YAKbF,EAAQE,WAAY,EAEpBD,EAAIE,UAAW,UAAWA,IAG3BC,IAAMC,EACN,SACCL,GAGGM,EAAY,KAEO,oBAAXC,OAEXD,EAAYC,OAAON,IAEQ,oBAAXO,SAEhBF,EAAYE,OAAOP,KAGfK,GAEJA,EAAUG,IAAKJ,GAGhBF,EAAUH,QAAUA"}